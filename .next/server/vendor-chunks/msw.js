'use strict';
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = 'vendor-chunks/msw';
exports.ids = ['vendor-chunks/msw'];
exports.modules = {
  /***/ '(ssr)/./node_modules/msw/lib/index.js':
    /*!***************************************!*\
  !*** ./node_modules/msw/lib/index.js ***!
  \***************************************/
    /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      eval(
        '\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  GraphQLHandler: () => GraphQLHandler,\n  MockedRequest: () => MockedRequest,\n  RESTMethods: () => RESTMethods,\n  RequestHandler: () => RequestHandler,\n  RestHandler: () => RestHandler,\n  SetupApi: () => SetupApi,\n  SetupWorkerApi: () => SetupWorkerApi,\n  cleanUrl: () => cleanUrl,\n  compose: () => compose,\n  context: () => context_exports,\n  createResponseComposition: () => createResponseComposition,\n  defaultContext: () => defaultContext,\n  defaultResponse: () => defaultResponse,\n  graphql: () => graphql,\n  graphqlContext: () => graphqlContext,\n  handleRequest: () => handleRequest,\n  matchRequestUrl: () => matchRequestUrl,\n  response: () => response,\n  rest: () => rest,\n  restContext: () => restContext,\n  setupWorker: () => setupWorker\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/context/index.ts\nvar context_exports = {};\n__export(context_exports, {\n  body: () => body,\n  cookie: () => cookie,\n  data: () => data,\n  delay: () => delay,\n  errors: () => errors,\n  extensions: () => extensions,\n  fetch: () => fetch,\n  json: () => json,\n  set: () => set,\n  status: () => status,\n  text: () => text,\n  xml: () => xml\n});\n\n// node_modules/.pnpm/statuses@2.0.1/node_modules/statuses/codes.json\nvar codes_default = {\n  "100": "Continue",\n  "101": "Switching Protocols",\n  "102": "Processing",\n  "103": "Early Hints",\n  "200": "OK",\n  "201": "Created",\n  "202": "Accepted",\n  "203": "Non-Authoritative Information",\n  "204": "No Content",\n  "205": "Reset Content",\n  "206": "Partial Content",\n  "207": "Multi-Status",\n  "208": "Already Reported",\n  "226": "IM Used",\n  "300": "Multiple Choices",\n  "301": "Moved Permanently",\n  "302": "Found",\n  "303": "See Other",\n  "304": "Not Modified",\n  "305": "Use Proxy",\n  "307": "Temporary Redirect",\n  "308": "Permanent Redirect",\n  "400": "Bad Request",\n  "401": "Unauthorized",\n  "402": "Payment Required",\n  "403": "Forbidden",\n  "404": "Not Found",\n  "405": "Method Not Allowed",\n  "406": "Not Acceptable",\n  "407": "Proxy Authentication Required",\n  "408": "Request Timeout",\n  "409": "Conflict",\n  "410": "Gone",\n  "411": "Length Required",\n  "412": "Precondition Failed",\n  "413": "Payload Too Large",\n  "414": "URI Too Long",\n  "415": "Unsupported Media Type",\n  "416": "Range Not Satisfiable",\n  "417": "Expectation Failed",\n  "418": "I\'m a Teapot",\n  "421": "Misdirected Request",\n  "422": "Unprocessable Entity",\n  "423": "Locked",\n  "424": "Failed Dependency",\n  "425": "Too Early",\n  "426": "Upgrade Required",\n  "428": "Precondition Required",\n  "429": "Too Many Requests",\n  "431": "Request Header Fields Too Large",\n  "451": "Unavailable For Legal Reasons",\n  "500": "Internal Server Error",\n  "501": "Not Implemented",\n  "502": "Bad Gateway",\n  "503": "Service Unavailable",\n  "504": "Gateway Timeout",\n  "505": "HTTP Version Not Supported",\n  "506": "Variant Also Negotiates",\n  "507": "Insufficient Storage",\n  "508": "Loop Detected",\n  "509": "Bandwidth Limit Exceeded",\n  "510": "Not Extended",\n  "511": "Network Authentication Required"\n};\n\n// src/context/status.ts\nvar status = (statusCode, statusText) => {\n  return (res) => {\n    res.status = statusCode;\n    res.statusText = statusText || codes_default[String(statusCode)];\n    return res;\n  };\n};\n\n// src/context/set.ts\nvar import_headers_polyfill = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\nfunction set(...args) {\n  return (res) => {\n    const [name, value] = args;\n    if (typeof name === "string") {\n      res.headers.append(name, value);\n    } else {\n      const headers = (0, import_headers_polyfill.objectToHeaders)(name);\n      headers.forEach((value2, name2) => {\n        res.headers.append(name2, value2);\n      });\n    }\n    return res;\n  };\n}\n\n// src/context/cookie.ts\nvar cookieUtils = __toESM(__webpack_require__(/*! cookie */ "(ssr)/./node_modules/cookie/index.js"));\nvar cookie = (name, value, options) => {\n  return (res) => {\n    const serializedCookie = cookieUtils.serialize(name, value, options);\n    res.headers.append("Set-Cookie", serializedCookie);\n    if (typeof document !== "undefined") {\n      document.cookie = serializedCookie;\n    }\n    return res;\n  };\n};\n\n// src/context/body.ts\nvar body = (value) => {\n  return (res) => {\n    res.body = value;\n    return res;\n  };\n};\n\n// src/utils/internal/jsonParse.ts\nfunction jsonParse(value) {\n  try {\n    return JSON.parse(value);\n  } catch (error2) {\n    return void 0;\n  }\n}\n\n// src/utils/internal/isObject.ts\nfunction isObject(value) {\n  return value != null && typeof value === "object" && !Array.isArray(value);\n}\n\n// src/utils/internal/mergeRight.ts\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce((result, [key, rightValue]) => {\n    const leftValue = result[key];\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue);\n      return result;\n    }\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue);\n      return result;\n    }\n    result[key] = rightValue;\n    return result;\n  }, Object.assign({}, left));\n}\n\n// src/context/json.ts\nvar json = (body2) => {\n  return (res) => {\n    res.headers.set("Content-Type", "application/json");\n    res.body = JSON.stringify(body2);\n    return res;\n  };\n};\n\n// src/context/data.ts\nvar data = (payload) => {\n  return (res) => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { data: payload });\n    return json(nextBody)(res);\n  };\n};\n\n// src/context/extensions.ts\nvar extensions = (payload) => {\n  return (res) => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { extensions: payload });\n    return json(nextBody)(res);\n  };\n};\n\n// src/context/delay.ts\nvar import_is_node_process = __webpack_require__(/*! is-node-process */ "(ssr)/./node_modules/is-node-process/lib/index.js");\nvar SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;\nvar MIN_SERVER_RESPONSE_TIME = 100;\nvar MAX_SERVER_RESPONSE_TIME = 400;\nvar NODE_SERVER_RESPONSE_TIME = 5;\nvar getRandomServerResponseTime = () => {\n  if ((0, import_is_node_process.isNodeProcess)()) {\n    return NODE_SERVER_RESPONSE_TIME;\n  }\n  return Math.floor(\n    Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME\n  );\n};\nvar delay = (durationOrMode) => {\n  return (res) => {\n    let delayTime;\n    if (typeof durationOrMode === "string") {\n      switch (durationOrMode) {\n        case "infinite": {\n          delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;\n          break;\n        }\n        case "real": {\n          delayTime = getRandomServerResponseTime();\n          break;\n        }\n        default: {\n          throw new Error(\n            `Failed to delay a response: unknown delay mode "${durationOrMode}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`\n          );\n        }\n      }\n    } else if (typeof durationOrMode === "undefined") {\n      delayTime = getRandomServerResponseTime();\n    } else {\n      if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {\n        throw new Error(\n          `Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for "setTimeout" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`\n        );\n      }\n      delayTime = durationOrMode;\n    }\n    res.delay = delayTime;\n    return res;\n  };\n};\n\n// src/context/errors.ts\nvar errors = (errorsList) => {\n  return (res) => {\n    if (errorsList == null) {\n      return res;\n    }\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { errors: errorsList });\n    return json(nextBody)(res);\n  };\n};\n\n// src/context/fetch.ts\nvar import_is_node_process2 = __webpack_require__(/*! is-node-process */ "(ssr)/./node_modules/is-node-process/lib/index.js");\nvar import_headers_polyfill2 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\nvar useFetch = (0, import_is_node_process2.isNodeProcess)() ? (input, init) => Promise.resolve().then(() => __toESM(__webpack_require__(/*! node-fetch */ "(ssr)/./node_modules/node-fetch/lib/index.js"))).then(\n  ({ default: nodeFetch }) => nodeFetch(input, init)\n) : globalThis.fetch;\nvar augmentRequestInit = (requestInit) => {\n  const headers = new import_headers_polyfill2.Headers(requestInit.headers);\n  headers.set("x-msw-bypass", "true");\n  return {\n    ...requestInit,\n    headers: headers.all()\n  };\n};\nvar createFetchRequestParameters = (input) => {\n  const { body: body2, method } = input;\n  const requestParameters = {\n    ...input,\n    body: void 0\n  };\n  if (["GET", "HEAD"].includes(method)) {\n    return requestParameters;\n  }\n  if (typeof body2 === "object" || typeof body2 === "number" || typeof body2 === "boolean") {\n    requestParameters.body = JSON.stringify(body2);\n  } else {\n    requestParameters.body = body2;\n  }\n  return requestParameters;\n};\nvar fetch = (input, requestInit = {}) => {\n  if (typeof input === "string") {\n    return useFetch(input, augmentRequestInit(requestInit));\n  }\n  const requestParameters = createFetchRequestParameters(input);\n  const derivedRequestInit = augmentRequestInit(requestParameters);\n  return useFetch(input.url.href, derivedRequestInit);\n};\n\n// src/context/text.ts\nvar text = (body2) => {\n  return (res) => {\n    res.headers.set("Content-Type", "text/plain");\n    res.body = body2;\n    return res;\n  };\n};\n\n// src/context/xml.ts\nvar xml = (body2) => {\n  return (res) => {\n    res.headers.set("Content-Type", "text/xml");\n    res.body = body2;\n    return res;\n  };\n};\n\n// src/utils/internal/checkGlobals.ts\nvar import_outvariant2 = __webpack_require__(/*! outvariant */ "(ssr)/./node_modules/outvariant/lib/index.js");\n\n// src/utils/internal/devUtils.ts\nvar import_outvariant = __webpack_require__(/*! outvariant */ "(ssr)/./node_modules/outvariant/lib/index.js");\nvar LIBRARY_PREFIX = "[MSW]";\nfunction formatMessage(message, ...positionals) {\n  const interpolatedMessage = (0, import_outvariant.format)(message, ...positionals);\n  return `${LIBRARY_PREFIX} ${interpolatedMessage}`;\n}\nfunction warn(message, ...positionals) {\n  console.warn(formatMessage(message, ...positionals));\n}\nfunction error(message, ...positionals) {\n  console.error(formatMessage(message, ...positionals));\n}\nvar devUtils = {\n  formatMessage,\n  warn,\n  error\n};\n\n// src/utils/internal/checkGlobals.ts\nfunction checkGlobals() {\n  (0, import_outvariant2.invariant)(\n    typeof URL !== "undefined",\n    devUtils.formatMessage(\n      `Global "URL" class is not defined. This likely means that you\'re running MSW in an environment that doesn\'t support all Node.js standard API (e.g. React Native). If that\'s the case, please use an appropriate polyfill for the "URL" class, like "react-native-url-polyfill".`\n    )\n  );\n}\n\n// src/setupWorker/setupWorker.ts\nvar import_outvariant5 = __webpack_require__(/*! outvariant */ "(ssr)/./node_modules/outvariant/lib/index.js");\nvar import_is_node_process3 = __webpack_require__(/*! is-node-process */ "(ssr)/./node_modules/is-node-process/lib/index.js");\n\n// src/setupWorker/start/createStartHandler.ts\nvar import_until4 = __webpack_require__(/*! @open-draft/until */ "(ssr)/./node_modules/@open-draft/until/lib/index.js");\n\n// src/setupWorker/start/utils/getWorkerInstance.ts\nvar import_until = __webpack_require__(/*! @open-draft/until */ "(ssr)/./node_modules/@open-draft/until/lib/index.js");\n\n// src/setupWorker/start/utils/getWorkerByRegistration.ts\nfunction getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker) {\n  const allStates = [\n    registration.active,\n    registration.installing,\n    registration.waiting\n  ];\n  const relevantStates = allStates.filter((state) => {\n    return state != null;\n  });\n  const worker = relevantStates.find((worker2) => {\n    return findWorker(worker2.scriptURL, absoluteWorkerUrl);\n  });\n  return worker || null;\n}\n\n// src/utils/url/getAbsoluteWorkerUrl.ts\nfunction getAbsoluteWorkerUrl(workerUrl) {\n  return new URL(workerUrl, location.href).href;\n}\n\n// src/setupWorker/start/utils/getWorkerInstance.ts\nvar getWorkerInstance = async (url, options = {}, findWorker) => {\n  const absoluteWorkerUrl = getAbsoluteWorkerUrl(url);\n  const mockRegistrations = await navigator.serviceWorker.getRegistrations().then(\n    (registrations) => registrations.filter(\n      (registration) => getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker)\n    )\n  );\n  if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {\n    location.reload();\n  }\n  const [existingRegistration] = mockRegistrations;\n  if (existingRegistration) {\n    return existingRegistration.update().then(() => {\n      return [\n        getWorkerByRegistration(\n          existingRegistration,\n          absoluteWorkerUrl,\n          findWorker\n        ),\n        existingRegistration\n      ];\n    });\n  }\n  const [error2, instance] = await (0, import_until.until)(\n    async () => {\n      const registration = await navigator.serviceWorker.register(url, options);\n      return [\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n        registration\n      ];\n    }\n  );\n  if (error2) {\n    const isWorkerMissing = error2.message.includes("(404)");\n    if (isWorkerMissing) {\n      const scopeUrl = new URL((options == null ? void 0 : options.scope) || "/", location.href);\n      throw new Error(\n        devUtils.formatMessage(`Failed to register a Service Worker for scope (\'${scopeUrl.href}\') with script (\'${absoluteWorkerUrl}\'): Service Worker script does not exist at the given path.\n\nDid you forget to run "npx msw init <PUBLIC_DIR>"?\n\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`)\n      );\n    }\n    throw new Error(\n      devUtils.formatMessage(\n        "Failed to register the Service Worker:\\n\\n%s",\n        error2.message\n      )\n    );\n  }\n  return instance;\n};\n\n// src/setupWorker/start/utils/printStartMessage.ts\nfunction printStartMessage(args = {}) {\n  if (args.quiet) {\n    return;\n  }\n  const message = args.message || "Mocking enabled.";\n  console.groupCollapsed(\n    `%c${devUtils.formatMessage(message)}`,\n    "color:orangered;font-weight:bold;"\n  );\n  console.log(\n    "%cDocumentation: %chttps://mswjs.io/docs",\n    "font-weight:bold",\n    "font-weight:normal"\n  );\n  console.log("Found an issue? https://github.com/mswjs/msw/issues");\n  if (args.workerUrl) {\n    console.log("Worker script URL:", args.workerUrl);\n  }\n  if (args.workerScope) {\n    console.log("Worker scope:", args.workerScope);\n  }\n  console.groupEnd();\n}\n\n// src/setupWorker/start/utils/enableMocking.ts\nasync function enableMocking(context, options) {\n  var _a, _b;\n  context.workerChannel.send("MOCK_ACTIVATE");\n  await context.events.once("MOCKING_ENABLED");\n  if (context.isMockingEnabled) {\n    devUtils.warn(\n      `Found a redundant "worker.start()" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this "worker.start()" call.`\n    );\n    return;\n  }\n  context.isMockingEnabled = true;\n  printStartMessage({\n    quiet: options.quiet,\n    workerScope: (_a = context.registration) == null ? void 0 : _a.scope,\n    workerUrl: (_b = context.worker) == null ? void 0 : _b.scriptURL\n  });\n}\n\n// src/setupWorker/start/utils/createMessageChannel.ts\nvar WorkerChannel = class {\n  constructor(port) {\n    this.port = port;\n  }\n  postMessage(event, ...rest2) {\n    const [data2, transfer] = rest2;\n    this.port.postMessage({ type: event, data: data2 }, { transfer });\n  }\n};\n\n// src/utils/NetworkError.ts\nvar NetworkError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "NetworkError";\n  }\n};\n\n// src/utils/request/parseWorkerRequest.ts\nvar import_interceptors2 = __webpack_require__(/*! @mswjs/interceptors */ "(ssr)/./node_modules/@mswjs/interceptors/lib/index.js");\nvar import_headers_polyfill5 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\n\n// src/utils/request/MockedRequest.ts\nvar cookieUtils3 = __toESM(__webpack_require__(/*! cookie */ "(ssr)/./node_modules/cookie/index.js"));\nvar import_cookies = __webpack_require__(/*! @mswjs/cookies */ "(ssr)/./node_modules/@mswjs/cookies/lib/index.js");\nvar import_interceptors = __webpack_require__(/*! @mswjs/interceptors */ "(ssr)/./node_modules/@mswjs/interceptors/lib/index.js");\nvar import_bufferUtils = __webpack_require__(/*! @mswjs/interceptors/lib/utils/bufferUtils.js */ "(ssr)/./node_modules/@mswjs/interceptors/lib/utils/bufferUtils.js");\nvar import_headers_polyfill4 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\n\n// src/utils/request/getRequestCookies.ts\nvar cookieUtils2 = __toESM(__webpack_require__(/*! cookie */ "(ssr)/./node_modules/cookie/index.js"));\nfunction getAllCookies() {\n  return cookieUtils2.parse(document.cookie);\n}\nfunction getRequestCookies(request) {\n  if (typeof document === "undefined" || typeof location === "undefined") {\n    return {};\n  }\n  switch (request.credentials) {\n    case "same-origin": {\n      return location.origin === request.url.origin ? getAllCookies() : {};\n    }\n    case "include": {\n      return getAllCookies();\n    }\n    default: {\n      return {};\n    }\n  }\n}\n\n// src/utils/internal/parseMultipartData.ts\nvar import_headers_polyfill3 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\nfunction parseContentHeaders(headersString) {\n  var _a, _b;\n  const headers = (0, import_headers_polyfill3.stringToHeaders)(headersString);\n  const contentType = headers.get("content-type") || "text/plain";\n  const disposition = headers.get("content-disposition");\n  if (!disposition) {\n    throw new Error(\'"Content-Disposition" header is required.\');\n  }\n  const directives = disposition.split(";").reduce((acc, chunk) => {\n    const [name2, ...rest2] = chunk.trim().split("=");\n    acc[name2] = rest2.join("=");\n    return acc;\n  }, {});\n  const name = (_a = directives.name) == null ? void 0 : _a.slice(1, -1);\n  const filename = (_b = directives.filename) == null ? void 0 : _b.slice(1, -1);\n  return {\n    name,\n    filename,\n    contentType\n  };\n}\nfunction parseMultipartData(data2, headers) {\n  const contentType = headers == null ? void 0 : headers.get("content-type");\n  if (!contentType) {\n    return void 0;\n  }\n  const [, ...directives] = contentType.split(/; */);\n  const boundary = directives.filter((d) => d.startsWith("boundary=")).map((s) => s.replace(/^boundary=/, ""))[0];\n  if (!boundary) {\n    return void 0;\n  }\n  const boundaryRegExp = new RegExp(`--+${boundary}`);\n  const fields = data2.split(boundaryRegExp).filter((chunk) => chunk.startsWith("\\r\\n") && chunk.endsWith("\\r\\n")).map((chunk) => chunk.trimStart().replace(/\\r\\n$/, ""));\n  if (!fields.length) {\n    return void 0;\n  }\n  const parsedBody = {};\n  try {\n    for (const field2 of fields) {\n      const [contentHeaders, ...rest2] = field2.split("\\r\\n\\r\\n");\n      const contentBody = rest2.join("\\r\\n\\r\\n");\n      const { contentType: contentType2, filename, name } = parseContentHeaders(contentHeaders);\n      const value = filename === void 0 ? contentBody : new File([contentBody], filename, { type: contentType2 });\n      const parsedValue = parsedBody[name];\n      if (parsedValue === void 0) {\n        parsedBody[name] = value;\n      } else if (Array.isArray(parsedValue)) {\n        parsedBody[name] = [...parsedValue, value];\n      } else {\n        parsedBody[name] = [parsedValue, value];\n      }\n    }\n    return parsedBody;\n  } catch (error2) {\n    return void 0;\n  }\n}\n\n// src/utils/request/parseBody.ts\nfunction parseBody(body2, headers) {\n  var _a;\n  if (!body2) {\n    return body2;\n  }\n  const contentType = ((_a = headers == null ? void 0 : headers.get("content-type")) == null ? void 0 : _a.toLowerCase()) || "";\n  const hasMultipartContent = contentType.startsWith("multipart/form-data");\n  if (hasMultipartContent && typeof body2 !== "object") {\n    return parseMultipartData(body2.toString(), headers) || body2;\n  }\n  const hasJsonContent = contentType.includes("json");\n  if (hasJsonContent && typeof body2 !== "object") {\n    return jsonParse(body2.toString()) || body2;\n  }\n  return body2;\n}\n\n// src/utils/internal/isStringEqual.ts\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\n// src/utils/request/MockedRequest.ts\nvar MockedRequest = class extends import_interceptors.IsomorphicRequest {\n  constructor(url, init = {}) {\n    super(url, init);\n    if (init.id) {\n      this.id = init.id;\n    }\n    this.cache = init.cache || "default";\n    this.destination = init.destination || "";\n    this.integrity = init.integrity || "";\n    this.keepalive = init.keepalive || false;\n    this.mode = init.mode || "cors";\n    this.priority = init.priority || "auto";\n    this.redirect = init.redirect || "follow";\n    this.referrer = init.referrer || "";\n    this.referrerPolicy = init.referrerPolicy || "no-referrer";\n    this.cookies = init.cookies || this.getCookies();\n  }\n  get body() {\n    const text2 = (0, import_bufferUtils.decodeBuffer)(this["_body"]);\n    const body2 = parseBody(text2, this.headers);\n    if (isStringEqual(this.method, "GET") && body2 === "") {\n      return void 0;\n    }\n    return body2;\n  }\n  passthrough() {\n    return {\n      status: 101,\n      statusText: "Continue",\n      headers: new import_headers_polyfill4.Headers(),\n      body: null,\n      passthrough: true,\n      once: false\n    };\n  }\n  getCookies() {\n    var _a;\n    const requestCookiesString = this.headers.get("cookie");\n    const ownCookies = requestCookiesString ? cookieUtils3.parse(requestCookiesString) : {};\n    import_cookies.store.hydrate();\n    const cookiesFromStore = Array.from(\n      (_a = import_cookies.store.get({ ...this, url: this.url.href })) == null ? void 0 : _a.entries()\n    ).reduce((cookies, [name, { value }]) => {\n      return Object.assign(cookies, { [name.trim()]: value });\n    }, {});\n    const cookiesFromDocument = getRequestCookies(this);\n    const forwardedCookies = {\n      ...cookiesFromDocument,\n      ...cookiesFromStore\n    };\n    for (const [name, value] of Object.entries(forwardedCookies)) {\n      this.headers.append("cookie", `${name}=${value}`);\n    }\n    return {\n      ...forwardedCookies,\n      ...ownCookies\n    };\n  }\n};\n\n// src/utils/request/parseWorkerRequest.ts\nfunction parseWorkerRequest(rawRequest) {\n  const url = new URL(rawRequest.url);\n  const headers = new import_headers_polyfill5.Headers(rawRequest.headers);\n  return new MockedRequest(url, {\n    ...rawRequest,\n    body: (0, import_interceptors2.encodeBuffer)(rawRequest.body || ""),\n    headers\n  });\n}\n\n// src/utils/handleRequest.ts\nvar import_until2 = __webpack_require__(/*! @open-draft/until */ "(ssr)/./node_modules/@open-draft/until/lib/index.js");\n\n// src/utils/getResponse.ts\nvar getResponse = async (request, handlers, resolutionContext) => {\n  const relevantHandlers = handlers.filter((handler) => {\n    return handler.test(request, resolutionContext);\n  });\n  if (relevantHandlers.length === 0) {\n    return {\n      handler: void 0,\n      response: void 0\n    };\n  }\n  const result = await relevantHandlers.reduce(async (executionResult, handler) => {\n    const previousResults = await executionResult;\n    if (!!(previousResults == null ? void 0 : previousResults.response)) {\n      return executionResult;\n    }\n    const result2 = await handler.run(request, resolutionContext);\n    if (result2 === null || result2.handler.shouldSkip) {\n      return null;\n    }\n    if (!result2.response) {\n      return {\n        request: result2.request,\n        handler: result2.handler,\n        response: void 0,\n        parsedResult: result2.parsedResult\n      };\n    }\n    if (result2.response.once) {\n      handler.markAsSkipped(true);\n    }\n    return result2;\n  }, Promise.resolve(null));\n  if (!result) {\n    return {\n      handler: void 0,\n      response: void 0\n    };\n  }\n  return {\n    handler: result.handler,\n    publicRequest: result.request,\n    parsedRequest: result.parsedResult,\n    response: result.response\n  };\n};\n\n// src/utils/request/onUnhandledRequest.ts\nvar import_js_levenshtein = __toESM(__webpack_require__(/*! js-levenshtein */ "(ssr)/./node_modules/js-levenshtein/index.js"));\n\n// src/utils/internal/parseGraphQLRequest.ts\nvar import_graphql = __webpack_require__(/*! graphql */ "(ssr)/./node_modules/graphql/index.js");\n\n// src/utils/request/getPublicUrlFromRequest.ts\nvar getPublicUrlFromRequest = (request) => {\n  return request.referrer.startsWith(request.url.origin) ? request.url.pathname : new URL(\n    request.url.pathname,\n    `${request.url.protocol}//${request.url.host}`\n  ).href;\n};\n\n// src/utils/internal/parseGraphQLRequest.ts\nfunction parseDocumentNode(node) {\n  var _a;\n  const operationDef = node.definitions.find((def) => {\n    return def.kind === "OperationDefinition";\n  });\n  return {\n    operationType: operationDef == null ? void 0 : operationDef.operation,\n    operationName: (_a = operationDef == null ? void 0 : operationDef.name) == null ? void 0 : _a.value\n  };\n}\nfunction parseQuery(query) {\n  try {\n    const ast = (0, import_graphql.parse)(query);\n    return parseDocumentNode(ast);\n  } catch (error2) {\n    return error2;\n  }\n}\nfunction extractMultipartVariables(variables, map, files) {\n  const operations = { variables };\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key \'${key}\' .`);\n    }\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split(".").reverse();\n      const paths = reversedPaths.reverse();\n      let target = operations;\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property \'${paths}\' is not in operations.`);\n        }\n        target = target[path];\n      }\n      target[lastPath] = files[key];\n    }\n  }\n  return operations.variables;\n}\nfunction getGraphQLInput(request) {\n  var _a, _b;\n  switch (request.method) {\n    case "GET": {\n      const query = request.url.searchParams.get("query");\n      const variables = request.url.searchParams.get("variables") || "";\n      return {\n        query,\n        variables: jsonParse(variables)\n      };\n    }\n    case "POST": {\n      if ((_a = request.body) == null ? void 0 : _a.query) {\n        const { query, variables } = request.body;\n        return {\n          query,\n          variables\n        };\n      }\n      if ((_b = request.body) == null ? void 0 : _b.operations) {\n        const { operations, map, ...files } = request.body;\n        const parsedOperations = jsonParse(\n          operations\n        ) || {};\n        if (!parsedOperations.query) {\n          return null;\n        }\n        const parsedMap = jsonParse(map || "") || {};\n        const variables = parsedOperations.variables ? extractMultipartVariables(\n          parsedOperations.variables,\n          parsedMap,\n          files\n        ) : {};\n        return {\n          query: parsedOperations.query,\n          variables\n        };\n      }\n    }\n    default:\n      return null;\n  }\n}\nfunction parseGraphQLRequest(request) {\n  const input = getGraphQLInput(request);\n  if (!input || !input.query) {\n    return void 0;\n  }\n  const { query, variables } = input;\n  const parsedResult = parseQuery(query);\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = getPublicUrlFromRequest(request);\n    throw new Error(\n      devUtils.formatMessage(\n        \'Failed to intercept a GraphQL request to "%s %s": cannot parse query. See the error message from the parser below.\\n\\n%s\',\n        request.method,\n        requestPublicUrl,\n        parsedResult.message\n      )\n    );\n  }\n  return {\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables\n  };\n}\n\n// src/utils/logging/getStatusCodeColor.ts\nfunction getStatusCodeColor(status2) {\n  if (status2 < 300) {\n    return "#69AB32" /* Success */;\n  }\n  if (status2 < 400) {\n    return "#F0BB4B" /* Warning */;\n  }\n  return "#E95F5D" /* Danger */;\n}\n\n// src/utils/logging/getTimestamp.ts\nfunction getTimestamp() {\n  const now = new Date();\n  return [now.getHours(), now.getMinutes(), now.getSeconds()].map(String).map((chunk) => chunk.slice(0, 2)).map((chunk) => chunk.padStart(2, "0")).join(":");\n}\n\n// src/utils/logging/prepareRequest.ts\nfunction prepareRequest(request) {\n  return {\n    ...request,\n    body: request.body,\n    headers: request.headers.all()\n  };\n}\n\n// src/utils/logging/prepareResponse.ts\nvar import_headers_polyfill6 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\nfunction prepareResponse(res) {\n  const responseHeaders = (0, import_headers_polyfill6.objectToHeaders)(res.headers);\n  const parsedBody = parseBody(res.body, responseHeaders);\n  return {\n    ...res,\n    body: parsedBody\n  };\n}\n\n// src/utils/matching/matchRequestUrl.ts\nvar import_path_to_regexp = __webpack_require__(/*! path-to-regexp */ "(ssr)/./node_modules/path-to-regexp/dist/index.js");\nvar import_getCleanUrl = __webpack_require__(/*! @mswjs/interceptors/lib/utils/getCleanUrl.js */ "(ssr)/./node_modules/@mswjs/interceptors/lib/utils/getCleanUrl.js");\n\n// src/utils/url/cleanUrl.ts\nvar REDUNDANT_CHARACTERS_EXP = /[\\?|#].*$/g;\nfunction getSearchParams(path) {\n  return new URL(`/${path}`, "http://localhost").searchParams;\n}\nfunction cleanUrl(path) {\n  return path.replace(REDUNDANT_CHARACTERS_EXP, "");\n}\n\n// src/utils/url/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n}\n\n// src/utils/url/getAbsoluteUrl.ts\nfunction getAbsoluteUrl(path, baseUrl) {\n  if (isAbsoluteUrl(path)) {\n    return path;\n  }\n  if (path.startsWith("*")) {\n    return path;\n  }\n  const origin = baseUrl || typeof document !== "undefined" && document.baseURI;\n  return origin ? decodeURI(new URL(encodeURI(path), origin).href) : path;\n}\n\n// src/utils/matching/normalizePath.ts\nfunction normalizePath(path, baseUrl) {\n  if (path instanceof RegExp) {\n    return path;\n  }\n  const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl);\n  return cleanUrl(maybeAbsoluteUrl);\n}\n\n// src/utils/matching/matchRequestUrl.ts\nfunction coercePath(path) {\n  return path.replace(\n    /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n    (_, parameterName, wildcard) => {\n      const expression = "(.*)";\n      if (!parameterName) {\n        return expression;\n      }\n      return parameterName.startsWith(":") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;\n    }\n  ).replace(/([^\\/])(:)(?=\\d+)/, "$1\\\\$2").replace(/^([^\\/]+)(:)(?=\\/\\/)/, "$1\\\\$2");\n}\nfunction matchRequestUrl(url, path, baseUrl) {\n  const normalizedPath = normalizePath(path, baseUrl);\n  const cleanPath = typeof normalizedPath === "string" ? coercePath(normalizedPath) : normalizedPath;\n  const cleanUrl2 = (0, import_getCleanUrl.getCleanUrl)(url);\n  const result = (0, import_path_to_regexp.match)(cleanPath, { decode: decodeURIComponent })(cleanUrl2);\n  const params = result && result.params || {};\n  return {\n    matches: result !== false,\n    params\n  };\n}\n\n// src/handlers/RequestHandler.ts\nvar import_headers_polyfill8 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\n\n// src/response.ts\nvar import_headers_polyfill7 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\n\n// src/utils/internal/compose.ts\nfunction compose(...fns) {\n  return (...args) => {\n    return fns.reduceRight((leftFn, rightFn) => {\n      return leftFn instanceof Promise ? Promise.resolve(leftFn).then(rightFn) : rightFn(leftFn);\n    }, args[0]);\n  };\n}\n\n// src/response.ts\nvar defaultResponse = {\n  status: 200,\n  statusText: "OK",\n  body: null,\n  delay: 0,\n  once: false,\n  passthrough: false\n};\nvar defaultResponseTransformers = [];\nfunction createResponseComposition(responseOverrides, defaultTransformers = defaultResponseTransformers) {\n  return async (...transformers) => {\n    const initialResponse = Object.assign(\n      {},\n      defaultResponse,\n      {\n        headers: new import_headers_polyfill7.Headers({\n          "x-powered-by": "msw"\n        })\n      },\n      responseOverrides\n    );\n    const resolvedTransformers = [\n      ...defaultTransformers,\n      ...transformers\n    ].filter(Boolean);\n    const resolvedResponse = resolvedTransformers.length > 0 ? compose(...resolvedTransformers)(initialResponse) : initialResponse;\n    return resolvedResponse;\n  };\n}\nvar response = Object.assign(createResponseComposition(), {\n  once: createResponseComposition({ once: true }),\n  networkError(message) {\n    throw new NetworkError(message);\n  }\n});\n\n// src/utils/internal/getCallFrame.ts\nvar SOURCE_FRAME = /[\\/\\\\]msw[\\/\\\\]src[\\/\\\\](.+)/;\nvar BUILD_FRAME = /(node_modules)?[\\/\\\\]lib[\\/\\\\](umd|esm|iief|cjs)[\\/\\\\]|^[^\\/\\\\]*$/;\nfunction getCallFrame(error2) {\n  const stack = error2.stack;\n  if (!stack) {\n    return;\n  }\n  const frames = stack.split("\\n").slice(1);\n  const declarationFrame = frames.find((frame) => {\n    return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame));\n  });\n  if (!declarationFrame) {\n    return;\n  }\n  const declarationPath = declarationFrame.replace(/\\s*at [^()]*\\(([^)]+)\\)/, "$1").replace(/^@/, "");\n  return declarationPath;\n}\n\n// src/utils/internal/isIterable.ts\nfunction isIterable(fn) {\n  if (!fn) {\n    return false;\n  }\n  return typeof fn[Symbol.iterator] == "function";\n}\n\n// src/handlers/RequestHandler.ts\nvar defaultContext = {\n  status,\n  set,\n  delay,\n  fetch\n};\nvar RequestHandler = class {\n  constructor(options) {\n    this.shouldSkip = false;\n    this.ctx = options.ctx || defaultContext;\n    this.resolver = options.resolver;\n    const callFrame = getCallFrame(new Error());\n    this.info = {\n      ...options.info,\n      callFrame\n    };\n  }\n  parse(_request, _resolutionContext) {\n    return null;\n  }\n  test(request, resolutionContext) {\n    return this.predicate(\n      request,\n      this.parse(request, resolutionContext),\n      resolutionContext\n    );\n  }\n  getPublicRequest(request, _parsedResult) {\n    return request;\n  }\n  markAsSkipped(shouldSkip = true) {\n    this.shouldSkip = shouldSkip;\n  }\n  async run(request, resolutionContext) {\n    if (this.shouldSkip) {\n      return null;\n    }\n    const parsedResult = this.parse(request, resolutionContext);\n    const shouldIntercept = this.predicate(\n      request,\n      parsedResult,\n      resolutionContext\n    );\n    if (!shouldIntercept) {\n      return null;\n    }\n    const publicRequest = this.getPublicRequest(request, parsedResult);\n    const executeResolver = this.wrapResolver(this.resolver);\n    const mockedResponse = await executeResolver(\n      publicRequest,\n      response,\n      this.ctx\n    );\n    return this.createExecutionResult(\n      parsedResult,\n      publicRequest,\n      mockedResponse\n    );\n  }\n  wrapResolver(resolver) {\n    return async (req, res, ctx) => {\n      const result = this.resolverGenerator || await resolver(req, res, ctx);\n      if (isIterable(result)) {\n        const { value, done } = result[Symbol.iterator]().next();\n        const nextResponse = await value;\n        if (!nextResponse && done) {\n          return this.resolverGeneratorResult;\n        }\n        if (!this.resolverGenerator) {\n          this.resolverGenerator = result;\n        }\n        this.resolverGeneratorResult = nextResponse;\n        return nextResponse;\n      }\n      return result;\n    };\n  }\n  createExecutionResult(parsedResult, request, response2) {\n    return {\n      handler: this,\n      parsedResult: parsedResult || null,\n      request,\n      response: response2 || null\n    };\n  }\n};\n\n// src/handlers/RestHandler.ts\nvar RESTMethods = /* @__PURE__ */ ((RESTMethods2) => {\n  RESTMethods2["HEAD"] = "HEAD";\n  RESTMethods2["GET"] = "GET";\n  RESTMethods2["POST"] = "POST";\n  RESTMethods2["PUT"] = "PUT";\n  RESTMethods2["PATCH"] = "PATCH";\n  RESTMethods2["OPTIONS"] = "OPTIONS";\n  RESTMethods2["DELETE"] = "DELETE";\n  return RESTMethods2;\n})(RESTMethods || {});\nvar restContext = {\n  ...defaultContext,\n  cookie,\n  body,\n  text,\n  json,\n  xml\n};\nvar RestRequest = class extends MockedRequest {\n  constructor(request, params) {\n    super(request.url, {\n      ...request,\n      body: request["_body"]\n    });\n    this.params = params;\n    this.id = request.id;\n  }\n};\nvar RestHandler = class extends RequestHandler {\n  constructor(method, path, resolver) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      ctx: restContext,\n      resolver\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const { method, path } = this.info;\n    if (path instanceof RegExp) {\n      return;\n    }\n    const url = cleanUrl(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for "${method} ${path}". Please match against a path instead and access query parameters in the response resolver function using "req.url.searchParams".`\n    );\n  }\n  parse(request, resolutionContext) {\n    return matchRequestUrl(\n      request.url,\n      this.info.path,\n      resolutionContext == null ? void 0 : resolutionContext.baseUrl\n    );\n  }\n  getPublicRequest(request, parsedResult) {\n    return new RestRequest(request, parsedResult.params || {});\n  }\n  predicate(request, parsedResult) {\n    const matchesMethod = this.info.method instanceof RegExp ? this.info.method.test(request.method) : isStringEqual(this.info.method, request.method);\n    return matchesMethod && parsedResult.matches;\n  }\n  log(request, response2) {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response2);\n    const statusColor = getStatusCodeColor(response2.status);\n    console.groupCollapsed(\n      devUtils.formatMessage("%s %s %s (%c%s%c)"),\n      getTimestamp(),\n      request.method,\n      publicUrl,\n      `color:${statusColor}`,\n      `${response2.status} ${response2.statusText}`,\n      "color:inherit"\n    );\n    console.log("Request", loggedRequest);\n    console.log("Handler:", this);\n    console.log("Response", loggedResponse);\n    console.groupEnd();\n  }\n};\n\n// src/context/field.ts\nvar import_outvariant3 = __webpack_require__(/*! outvariant */ "(ssr)/./node_modules/outvariant/lib/index.js");\nvar field = (fieldName, fieldValue) => {\n  return (res) => {\n    validateFieldName(fieldName);\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { [fieldName]: fieldValue });\n    return json(nextBody)(res);\n  };\n};\nfunction validateFieldName(fieldName) {\n  (0, import_outvariant3.invariant)(\n    fieldName.trim() !== "",\n    devUtils.formatMessage(\n      "Failed to set a custom field on a GraphQL response: field name cannot be empty."\n    )\n  );\n  (0, import_outvariant3.invariant)(\n    fieldName !== "data",\n    devUtils.formatMessage(\n      \'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.data()" instead?\',\n      fieldName\n    )\n  );\n  (0, import_outvariant3.invariant)(\n    fieldName !== "errors",\n    devUtils.formatMessage(\n      \'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.errors()" instead?\',\n      fieldName\n    )\n  );\n  (0, import_outvariant3.invariant)(\n    fieldName !== "extensions",\n    devUtils.formatMessage(\n      \'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.extensions()" instead?\',\n      fieldName\n    )\n  );\n}\n\n// src/utils/internal/tryCatch.ts\nfunction tryCatch(fn, onException) {\n  try {\n    const result = fn();\n    return result;\n  } catch (error2) {\n    onException == null ? void 0 : onException(error2);\n  }\n}\n\n// src/handlers/GraphQLHandler.ts\nvar graphqlContext = {\n  ...defaultContext,\n  data,\n  extensions,\n  errors,\n  cookie,\n  field\n};\nfunction isDocumentNode(value) {\n  if (value == null) {\n    return false;\n  }\n  return typeof value === "object" && "kind" in value && "definitions" in value;\n}\nvar GraphQLRequest = class extends MockedRequest {\n  constructor(request, variables, operationName) {\n    super(request.url, {\n      ...request,\n      body: request["_body"]\n    });\n    this.variables = variables;\n    this.operationName = operationName;\n  }\n};\nvar GraphQLHandler = class extends RequestHandler {\n  constructor(operationType, operationName, endpoint, resolver) {\n    let resolvedOperationName = operationName;\n    if (isDocumentNode(operationName)) {\n      const parsedNode = parseDocumentNode(operationName);\n      if (parsedNode.operationType !== operationType) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected "${operationType}", but got "${parsedNode.operationType}").`\n        );\n      }\n      if (!parsedNode.operationName) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`\n        );\n      }\n      resolvedOperationName = parsedNode.operationName;\n    }\n    const header = operationType === "all" ? `${operationType} (origin: ${endpoint.toString()})` : `${operationType} ${resolvedOperationName} (origin: ${endpoint.toString()})`;\n    super({\n      info: {\n        header,\n        operationType,\n        operationName: resolvedOperationName\n      },\n      ctx: graphqlContext,\n      resolver\n    });\n    this.endpoint = endpoint;\n  }\n  parse(request) {\n    return tryCatch(\n      () => parseGraphQLRequest(request),\n      (error2) => console.error(error2.message)\n    );\n  }\n  getPublicRequest(request, parsedResult) {\n    var _a, _b;\n    return new GraphQLRequest(\n      request,\n      (_a = parsedResult == null ? void 0 : parsedResult.variables) != null ? _a : {},\n      (_b = parsedResult == null ? void 0 : parsedResult.operationName) != null ? _b : ""\n    );\n  }\n  predicate(request, parsedResult) {\n    if (!parsedResult) {\n      return false;\n    }\n    if (!parsedResult.operationName && this.info.operationType !== "all") {\n      const publicUrl = getPublicUrlFromRequest(request);\n      devUtils.warn(`Failed to intercept a GraphQL request at "${request.method} ${publicUrl}": anonymous GraphQL operations are not supported.\n\nConsider naming this operation or using "graphql.operation()" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation      `);\n      return false;\n    }\n    const hasMatchingUrl = matchRequestUrl(request.url, this.endpoint);\n    const hasMatchingOperationType = this.info.operationType === "all" || parsedResult.operationType === this.info.operationType;\n    const hasMatchingOperationName = this.info.operationName instanceof RegExp ? this.info.operationName.test(parsedResult.operationName || "") : parsedResult.operationName === this.info.operationName;\n    return hasMatchingUrl.matches && hasMatchingOperationType && hasMatchingOperationName;\n  }\n  log(request, response2, parsedRequest) {\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response2);\n    const statusColor = getStatusCodeColor(response2.status);\n    const requestInfo = (parsedRequest == null ? void 0 : parsedRequest.operationName) ? `${parsedRequest == null ? void 0 : parsedRequest.operationType} ${parsedRequest == null ? void 0 : parsedRequest.operationName}` : `anonymous ${parsedRequest == null ? void 0 : parsedRequest.operationType}`;\n    console.groupCollapsed(\n      devUtils.formatMessage("%s %s (%c%s%c)"),\n      getTimestamp(),\n      `${requestInfo}`,\n      `color:${statusColor}`,\n      `${response2.status} ${response2.statusText}`,\n      "color:inherit"\n    );\n    console.log("Request:", loggedRequest);\n    console.log("Handler:", this);\n    console.log("Response:", loggedResponse);\n    console.groupEnd();\n  }\n};\n\n// src/utils/request/onUnhandledRequest.ts\nvar MAX_MATCH_SCORE = 3;\nvar MAX_SUGGESTION_COUNT = 4;\nvar TYPE_MATCH_DELTA = 0.5;\nfunction groupHandlersByType(handlers) {\n  return handlers.reduce(\n    (groups, handler) => {\n      if (handler instanceof RestHandler) {\n        groups.rest.push(handler);\n      }\n      if (handler instanceof GraphQLHandler) {\n        groups.graphql.push(handler);\n      }\n      return groups;\n    },\n    {\n      rest: [],\n      graphql: []\n    }\n  );\n}\nfunction getRestHandlerScore() {\n  return (request, handler) => {\n    const { path, method } = handler.info;\n    if (path instanceof RegExp || method instanceof RegExp) {\n      return Infinity;\n    }\n    const hasSameMethod = isStringEqual(request.method, method);\n    const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0;\n    const requestPublicUrl = getPublicUrlFromRequest(request);\n    const score = (0, import_js_levenshtein.default)(requestPublicUrl, path);\n    return score - methodScoreDelta;\n  };\n}\nfunction getGraphQLHandlerScore(parsedQuery) {\n  return (_, handler) => {\n    if (typeof parsedQuery.operationName === "undefined") {\n      return Infinity;\n    }\n    const { operationType, operationName } = handler.info;\n    if (typeof operationName !== "string") {\n      return Infinity;\n    }\n    const hasSameOperationType = parsedQuery.operationType === operationType;\n    const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0;\n    const score = (0, import_js_levenshtein.default)(parsedQuery.operationName, operationName);\n    return score - operationTypeScoreDelta;\n  };\n}\nfunction getSuggestedHandler(request, handlers, getScore) {\n  const suggestedHandlers = handlers.reduce((suggestions, handler) => {\n    const score = getScore(request, handler);\n    return suggestions.concat([[score, handler]]);\n  }, []).sort(([leftScore], [rightScore]) => leftScore - rightScore).filter(([score]) => score <= MAX_MATCH_SCORE).slice(0, MAX_SUGGESTION_COUNT).map(([, handler]) => handler);\n  return suggestedHandlers;\n}\nfunction getSuggestedHandlersMessage(handlers) {\n  if (handlers.length > 1) {\n    return `Did you mean to request one of the following resources instead?\n\n${handlers.map((handler) => `  \\u2022 ${handler.info.header}`).join("\\n")}`;\n  }\n  return `Did you mean to request "${handlers[0].info.header}" instead?`;\n}\nfunction onUnhandledRequest(request, handlers, strategy = "warn") {\n  const parsedGraphQLQuery = tryCatch(() => parseGraphQLRequest(request));\n  function generateHandlerSuggestion() {\n    const handlerGroups = groupHandlersByType(handlers);\n    const relevantHandlers = parsedGraphQLQuery ? handlerGroups.graphql : handlerGroups.rest;\n    const suggestedHandlers = getSuggestedHandler(\n      request,\n      relevantHandlers,\n      parsedGraphQLQuery ? getGraphQLHandlerScore(parsedGraphQLQuery) : getRestHandlerScore()\n    );\n    return suggestedHandlers.length > 0 ? getSuggestedHandlersMessage(suggestedHandlers) : "";\n  }\n  function generateUnhandledRequestMessage() {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const requestHeader = parsedGraphQLQuery ? `${parsedGraphQLQuery.operationType} ${parsedGraphQLQuery.operationName} (${request.method} ${publicUrl})` : `${request.method} ${publicUrl}`;\n    const handlerSuggestion = generateHandlerSuggestion();\n    const messageTemplate = [\n      `captured a request without a matching request handler:`,\n      `  \\u2022 ${requestHeader}`,\n      handlerSuggestion,\n      `If you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/getting-started/mocks`\n    ].filter(Boolean);\n    return messageTemplate.join("\\n\\n");\n  }\n  function applyStrategy(strategy2) {\n    const message = generateUnhandledRequestMessage();\n    switch (strategy2) {\n      case "error": {\n        devUtils.error("Error: %s", message);\n        throw new Error(\n          devUtils.formatMessage(\n            \'Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.\'\n          )\n        );\n      }\n      case "warn": {\n        devUtils.warn("Warning: %s", message);\n        break;\n      }\n      case "bypass":\n        break;\n      default:\n        throw new Error(\n          devUtils.formatMessage(\n            \'Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.\',\n            strategy2\n          )\n        );\n    }\n  }\n  if (typeof strategy === "function") {\n    strategy(request, {\n      warning: applyStrategy.bind(null, "warn"),\n      error: applyStrategy.bind(null, "error")\n    });\n    return;\n  }\n  applyStrategy(strategy);\n}\n\n// src/utils/request/readResponseCookies.ts\nvar import_cookies2 = __webpack_require__(/*! @mswjs/cookies */ "(ssr)/./node_modules/@mswjs/cookies/lib/index.js");\nfunction readResponseCookies(request, response2) {\n  import_cookies2.store.add({ ...request, url: request.url.toString() }, response2);\n  import_cookies2.store.persist();\n}\n\n// src/utils/handleRequest.ts\nasync function handleRequest(request, handlers, options, emitter, handleRequestOptions) {\n  var _a, _b, _c, _d, _e, _f;\n  emitter.emit("request:start", request);\n  if (request.headers.get("x-msw-bypass") === "true") {\n    emitter.emit("request:end", request);\n    (_a = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _a.call(handleRequestOptions, request);\n    return;\n  }\n  const [lookupError, lookupResult] = await (0, import_until2.until)(() => {\n    return getResponse(\n      request,\n      handlers,\n      handleRequestOptions == null ? void 0 : handleRequestOptions.resolutionContext\n    );\n  });\n  if (lookupError) {\n    emitter.emit("unhandledException", lookupError, request);\n    throw lookupError;\n  }\n  const { handler, response: response2 } = lookupResult;\n  if (!handler) {\n    onUnhandledRequest(request, handlers, options.onUnhandledRequest);\n    emitter.emit("request:unhandled", request);\n    emitter.emit("request:end", request);\n    (_b = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _b.call(handleRequestOptions, request);\n    return;\n  }\n  if (!response2) {\n    devUtils.warn(\n      `Expected response resolver to return a mocked response Object, but got %s. The original response is going to be used instead.\n\n  \\u2022 %s\n    %s`,\n      response2,\n      handler.info.header,\n      handler.info.callFrame\n    );\n    emitter.emit("request:end", request);\n    (_c = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _c.call(handleRequestOptions, request);\n    return;\n  }\n  if (response2.passthrough) {\n    emitter.emit("request:end", request);\n    (_d = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _d.call(handleRequestOptions, request);\n    return;\n  }\n  readResponseCookies(request, response2);\n  emitter.emit("request:match", request);\n  const requiredLookupResult = lookupResult;\n  const transformedResponse = ((_e = handleRequestOptions == null ? void 0 : handleRequestOptions.transformResponse) == null ? void 0 : _e.call(handleRequestOptions, response2)) || response2;\n  (_f = handleRequestOptions == null ? void 0 : handleRequestOptions.onMockedResponse) == null ? void 0 : _f.call(\n    handleRequestOptions,\n    transformedResponse,\n    requiredLookupResult\n  );\n  emitter.emit("request:end", request);\n  return transformedResponse;\n}\n\n// src/utils/logging/serializeResponse.ts\nvar import_headers_polyfill9 = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.js");\nasync function serializeResponse(response2) {\n  return {\n    status: response2.status,\n    statusText: response2.statusText,\n    headers: (0, import_headers_polyfill9.flattenHeadersObject)((0, import_headers_polyfill9.headersToObject)(response2.headers)),\n    body: await response2.clone().text()\n  };\n}\n\n// src/setupWorker/start/createRequestListener.ts\nvar createRequestListener = (context, options) => {\n  return async (event, message) => {\n    var _a;\n    const messageChannel = new WorkerChannel(event.ports[0]);\n    const request = parseWorkerRequest(message.payload);\n    try {\n      await handleRequest(\n        request,\n        context.requestHandlers,\n        options,\n        context.emitter,\n        {\n          transformResponse,\n          onPassthroughResponse() {\n            messageChannel.postMessage("NOT_FOUND");\n          },\n          async onMockedResponse(response2, { handler, publicRequest, parsedRequest }) {\n            if (response2.body instanceof ReadableStream) {\n              throw new Error(\n                devUtils.formatMessage(\n                  \'Failed to construct a mocked response with a "ReadableStream" body: mocked streams are not supported. Follow https://github.com/mswjs/msw/issues/1336 for more details.\'\n                )\n              );\n            }\n            const responseInstance = new Response(response2.body, response2);\n            const responseForLogs = responseInstance.clone();\n            const responseBodyBuffer = await responseInstance.arrayBuffer();\n            const responseBody = response2.body == null ? null : responseBodyBuffer;\n            messageChannel.postMessage(\n              "MOCK_RESPONSE",\n              {\n                ...response2,\n                body: responseBody\n              },\n              [responseBodyBuffer]\n            );\n            if (!options.quiet) {\n              context.emitter.once("response:mocked", async () => {\n                handler.log(\n                  publicRequest,\n                  await serializeResponse(responseForLogs),\n                  parsedRequest\n                );\n              });\n            }\n          }\n        }\n      );\n    } catch (error2) {\n      if (error2 instanceof NetworkError) {\n        messageChannel.postMessage("NETWORK_ERROR", {\n          name: error2.name,\n          message: error2.message\n        });\n        return;\n      }\n      if (error2 instanceof Error) {\n        devUtils.error(\n          `Uncaught exception in the request handler for "%s %s":\n\n%s\n\nThis exception has been gracefully handled as a 500 response, however, it\'s strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,\n          request.method,\n          request.url,\n          (_a = error2.stack) != null ? _a : error2\n        );\n        messageChannel.postMessage("MOCK_RESPONSE", {\n          status: 500,\n          statusText: "Request Handler Error",\n          headers: {\n            "Content-Type": "application/json"\n          },\n          body: JSON.stringify({\n            name: error2.name,\n            message: error2.message,\n            stack: error2.stack\n          })\n        });\n      }\n    }\n  };\n};\nfunction transformResponse(response2) {\n  return {\n    status: response2.status,\n    statusText: response2.statusText,\n    headers: response2.headers.all(),\n    body: response2.body,\n    delay: response2.delay\n  };\n}\n\n// src/utils/internal/requestIntegrityCheck.ts\nasync function requestIntegrityCheck(context, serviceWorker) {\n  context.workerChannel.send("INTEGRITY_CHECK_REQUEST");\n  const { payload: actualChecksum } = await context.events.once(\n    "INTEGRITY_CHECK_RESPONSE"\n  );\n  if (actualChecksum !== "3d6b9f06410d179a7f7404d4bf4c3c70") {\n    throw new Error(\n      `Currently active Service Worker (${actualChecksum}) is behind the latest published one (${"3d6b9f06410d179a7f7404d4bf4c3c70"}).`\n    );\n  }\n  return serviceWorker;\n}\n\n// src/utils/deferNetworkRequestsUntil.ts\nvar import_until3 = __webpack_require__(/*! @open-draft/until */ "(ssr)/./node_modules/@open-draft/until/lib/index.js");\nfunction deferNetworkRequestsUntil(predicatePromise) {\n  const originalXhrSend = window.XMLHttpRequest.prototype.send;\n  window.XMLHttpRequest.prototype.send = function(...args) {\n    (0, import_until3.until)(() => predicatePromise).then(() => {\n      window.XMLHttpRequest.prototype.send = originalXhrSend;\n      this.send(...args);\n    });\n  };\n  const originalFetch = window.fetch;\n  window.fetch = async (...args) => {\n    await (0, import_until3.until)(() => predicatePromise);\n    window.fetch = originalFetch;\n    return window.fetch(...args);\n  };\n}\n\n// src/setupWorker/start/createResponseListener.ts\nfunction createResponseListener(context) {\n  return (_, message) => {\n    var _a;\n    const { payload: responseJson } = message;\n    if ((_a = responseJson.type) == null ? void 0 : _a.includes("opaque")) {\n      return;\n    }\n    const response2 = new Response(responseJson.body || null, responseJson);\n    const isMockedResponse = response2.headers.get("x-powered-by") === "msw";\n    if (isMockedResponse) {\n      context.emitter.emit("response:mocked", response2, responseJson.requestId);\n    } else {\n      context.emitter.emit("response:bypass", response2, responseJson.requestId);\n    }\n  };\n}\n\n// src/setupWorker/start/utils/validateWorkerScope.ts\nfunction validateWorkerScope(registration, options) {\n  if (!(options == null ? void 0 : options.quiet) && !location.href.startsWith(registration.scope)) {\n    devUtils.warn(\n      `Cannot intercept requests on this page because it\'s outside of the worker\'s scope ("${registration.scope}"). If you wish to mock API requests on this page, you must resolve this scope issue.\n\n- (Recommended) Register the worker at the root level ("/") of your application.\n- Set the "Service-Worker-Allowed" response header to allow out-of-scope workers.`\n    );\n  }\n}\n\n// src/setupWorker/start/createStartHandler.ts\nvar createStartHandler = (context) => {\n  return function start(options, customOptions) {\n    const startWorkerInstance = async () => {\n      context.events.removeAllListeners();\n      context.workerChannel.on(\n        "REQUEST",\n        createRequestListener(context, options)\n      );\n      context.workerChannel.on("RESPONSE", createResponseListener(context));\n      const instance = await getWorkerInstance(\n        options.serviceWorker.url,\n        options.serviceWorker.options,\n        options.findWorker\n      );\n      const [worker, registration] = instance;\n      if (!worker) {\n        const missingWorkerMessage = (customOptions == null ? void 0 : customOptions.findWorker) ? devUtils.formatMessage(\n          `Failed to locate the Service Worker registration using a custom "findWorker" predicate.\n\nPlease ensure that the custom predicate properly locates the Service Worker registration at "%s".\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\n`,\n          options.serviceWorker.url\n        ) : devUtils.formatMessage(\n          `Failed to locate the Service Worker registration.\n\nThis most likely means that the worker script URL "%s" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.\n\nPlease consider using a custom "serviceWorker.url" option to point to the actual worker script location, or a custom "findWorker" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,\n          options.serviceWorker.url,\n          location.host\n        );\n        throw new Error(missingWorkerMessage);\n      }\n      context.worker = worker;\n      context.registration = registration;\n      context.events.addListener(window, "beforeunload", () => {\n        if (worker.state !== "redundant") {\n          context.workerChannel.send("CLIENT_CLOSED");\n        }\n        window.clearInterval(context.keepAliveInterval);\n      });\n      const [integrityError] = await (0, import_until4.until)(\n        () => requestIntegrityCheck(context, worker)\n      );\n      if (integrityError) {\n        devUtils.error(`Detected outdated Service Worker: ${integrityError.message}\n\nThe mocking is still enabled, but it\'s highly recommended that you update your Service Worker by running:\n\n$ npx msw init <PUBLIC_DIR>\n\nThis is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.\nIf this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues      `);\n      }\n      context.keepAliveInterval = window.setInterval(\n        () => context.workerChannel.send("KEEPALIVE_REQUEST"),\n        5e3\n      );\n      validateWorkerScope(registration, context.startOptions);\n      return registration;\n    };\n    const workerRegistration = startWorkerInstance().then(\n      async (registration) => {\n        const pendingInstance = registration.installing || registration.waiting;\n        if (pendingInstance) {\n          await new Promise((resolve) => {\n            pendingInstance.addEventListener("statechange", () => {\n              if (pendingInstance.state === "activated") {\n                return resolve();\n              }\n            });\n          });\n        }\n        await enableMocking(context, options).catch((error2) => {\n          throw new Error(`Failed to enable mocking: ${error2 == null ? void 0 : error2.message}`);\n        });\n        return registration;\n      }\n    );\n    if (options.waitUntilReady) {\n      deferNetworkRequestsUntil(workerRegistration);\n    }\n    return workerRegistration;\n  };\n};\n\n// src/setupWorker/stop/utils/printStopMessage.ts\nfunction printStopMessage(args = {}) {\n  if (args.quiet) {\n    return;\n  }\n  console.log(\n    `%c${devUtils.formatMessage("Mocking disabled.")}`,\n    "color:orangered;font-weight:bold;"\n  );\n}\n\n// src/setupWorker/stop/createStop.ts\nvar createStop = (context) => {\n  return function stop() {\n    var _a;\n    if (!context.isMockingEnabled) {\n      devUtils.warn(\n        \'Found a redundant "worker.stop()" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this "worker.stop()" call.\'\n      );\n      return;\n    }\n    context.workerChannel.send("MOCK_DEACTIVATE");\n    context.isMockingEnabled = false;\n    window.clearInterval(context.keepAliveInterval);\n    printStopMessage({ quiet: (_a = context.startOptions) == null ? void 0 : _a.quiet });\n  };\n};\n\n// src/setupWorker/start/utils/prepareStartHandler.ts\nvar DEFAULT_START_OPTIONS = {\n  serviceWorker: {\n    url: "/mockServiceWorker.js",\n    options: null\n  },\n  quiet: false,\n  waitUntilReady: true,\n  onUnhandledRequest: "warn",\n  findWorker(scriptURL, mockServiceWorkerUrl) {\n    return scriptURL === mockServiceWorkerUrl;\n  }\n};\n\n// src/setupWorker/start/createFallbackRequestListener.ts\nvar import_interceptors3 = __webpack_require__(/*! @mswjs/interceptors */ "(ssr)/./node_modules/@mswjs/interceptors/lib/index.js");\nvar import_fetch3 = __webpack_require__(/*! @mswjs/interceptors/lib/interceptors/fetch */ "(ssr)/./node_modules/@mswjs/interceptors/lib/interceptors/fetch/index.js");\nvar import_XMLHttpRequest = __webpack_require__(/*! @mswjs/interceptors/lib/interceptors/XMLHttpRequest */ "(ssr)/./node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/index.js");\n\n// src/utils/request/createResponseFromIsomorphicResponse.ts\nfunction createResponseFromIsomorphicResponse(response2) {\n  return new Response(response2.body, {\n    status: response2.status,\n    statusText: response2.statusText,\n    headers: response2.headers\n  });\n}\n\n// src/setupWorker/start/createFallbackRequestListener.ts\nfunction createFallbackRequestListener(context, options) {\n  const interceptor = new import_interceptors3.BatchInterceptor({\n    name: "fallback",\n    interceptors: [new import_fetch3.FetchInterceptor(), new import_XMLHttpRequest.XMLHttpRequestInterceptor()]\n  });\n  interceptor.on("request", async (request) => {\n    const mockedRequest = new MockedRequest(request.url, {\n      ...request,\n      body: await request.arrayBuffer()\n    });\n    const response2 = await handleRequest(\n      mockedRequest,\n      context.requestHandlers,\n      options,\n      context.emitter,\n      {\n        transformResponse(response3) {\n          return {\n            status: response3.status,\n            statusText: response3.statusText,\n            headers: response3.headers.all(),\n            body: response3.body,\n            delay: response3.delay\n          };\n        },\n        onMockedResponse(_, { handler, publicRequest, parsedRequest }) {\n          if (!options.quiet) {\n            context.emitter.once("response:mocked", async (response3) => {\n              handler.log(\n                publicRequest,\n                await serializeResponse(response3),\n                parsedRequest\n              );\n            });\n          }\n        }\n      }\n    );\n    if (response2) {\n      request.respondWith(response2);\n    }\n  });\n  interceptor.on("response", (request, response2) => {\n    if (!request.id) {\n      return;\n    }\n    const browserResponse = createResponseFromIsomorphicResponse(response2);\n    if (response2.headers.get("x-powered-by") === "msw") {\n      context.emitter.emit("response:mocked", browserResponse, request.id);\n    } else {\n      context.emitter.emit("response:bypass", browserResponse, request.id);\n    }\n  });\n  interceptor.apply();\n  return interceptor;\n}\n\n// src/setupWorker/start/createFallbackStart.ts\nfunction createFallbackStart(context) {\n  return async function start(options) {\n    context.fallbackInterceptor = createFallbackRequestListener(\n      context,\n      options\n    );\n    printStartMessage({\n      message: "Mocking enabled (fallback mode).",\n      quiet: options.quiet\n    });\n    return void 0;\n  };\n}\n\n// src/setupWorker/stop/createFallbackStop.ts\nfunction createFallbackStop(context) {\n  return function stop() {\n    var _a, _b;\n    (_a = context.fallbackInterceptor) == null ? void 0 : _a.dispose();\n    printStopMessage({ quiet: (_b = context.startOptions) == null ? void 0 : _b.quiet });\n  };\n}\n\n// src/SetupApi.ts\nvar import_outvariant4 = __webpack_require__(/*! outvariant */ "(ssr)/./node_modules/outvariant/lib/index.js");\nvar import_strict_event_emitter = __webpack_require__(/*! strict-event-emitter */ "(ssr)/./node_modules/strict-event-emitter/lib/index.js");\n\n// src/utils/internal/pipeEvents.ts\nfunction pipeEvents(source, destination) {\n  const rawEmit = source.emit;\n  if (rawEmit._isPiped) {\n    return;\n  }\n  source.emit = function(event, ...data2) {\n    destination.emit(event, ...data2);\n    return rawEmit.call(this, event, ...data2);\n  };\n  source.emit._isPiped = true;\n}\n\n// src/utils/internal/toReadonlyArray.ts\nfunction toReadonlyArray(source) {\n  const clone = [...source];\n  Object.freeze(clone);\n  return clone;\n}\n\n// src/SetupApi.ts\nvar SetupApi = class {\n  constructor(...initialHandlers) {\n    this.validateHandlers(...initialHandlers);\n    this.initialHandlers = toReadonlyArray(initialHandlers);\n    this.currentHandlers = [...initialHandlers];\n    this.emitter = new import_strict_event_emitter.Emitter();\n    this.publicEmitter = new import_strict_event_emitter.Emitter();\n    pipeEvents(this.emitter, this.publicEmitter);\n    this.events = this.createLifeCycleEvents();\n  }\n  validateHandlers(...handlers) {\n    for (const handler of handlers) {\n      (0, import_outvariant4.invariant)(\n        !Array.isArray(handler),\n        devUtils.formatMessage(\n          \'Failed to construct "%s" given an Array of request handlers. Make sure you spread the request handlers when calling the respective setup function.\'\n        ),\n        this.constructor.name\n      );\n    }\n  }\n  dispose() {\n    this.emitter.removeAllListeners();\n    this.publicEmitter.removeAllListeners();\n  }\n  use(...runtimeHandlers) {\n    this.currentHandlers.unshift(...runtimeHandlers);\n  }\n  restoreHandlers() {\n    this.currentHandlers.forEach((handler) => {\n      handler.markAsSkipped(false);\n    });\n  }\n  resetHandlers(...nextHandlers) {\n    this.currentHandlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];\n  }\n  listHandlers() {\n    return toReadonlyArray(this.currentHandlers);\n  }\n  createLifeCycleEvents() {\n    return {\n      on: (...args) => {\n        return this.publicEmitter.on(...args);\n      },\n      removeListener: (...args) => {\n        return this.publicEmitter.removeListener(...args);\n      },\n      removeAllListeners: (...args) => {\n        return this.publicEmitter.removeAllListeners(...args);\n      }\n    };\n  }\n};\n\n// src/setupWorker/setupWorker.ts\nvar SetupWorkerApi = class extends SetupApi {\n  constructor(...handlers) {\n    super(...handlers);\n    this.startHandler = null;\n    this.stopHandler = null;\n    (0, import_outvariant5.invariant)(\n      !(0, import_is_node_process3.isNodeProcess)(),\n      devUtils.formatMessage(\n        "Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead."\n      )\n    );\n    this.listeners = [];\n    this.context = this.createWorkerContext();\n  }\n  createWorkerContext() {\n    const context = {\n      isMockingEnabled: false,\n      startOptions: null,\n      worker: null,\n      registration: null,\n      requestHandlers: this.currentHandlers,\n      emitter: this.emitter,\n      workerChannel: {\n        on: (eventType, callback) => {\n          this.context.events.addListener(\n            navigator.serviceWorker,\n            "message",\n            (event) => {\n              if (event.source !== this.context.worker) {\n                return;\n              }\n              const message = event.data;\n              if (!message) {\n                return;\n              }\n              if (message.type === eventType) {\n                callback(event, message);\n              }\n            }\n          );\n        },\n        send: (type) => {\n          var _a;\n          (_a = this.context.worker) == null ? void 0 : _a.postMessage(type);\n        }\n      },\n      events: {\n        addListener: (target, eventType, callback) => {\n          target.addEventListener(eventType, callback);\n          this.listeners.push({ eventType, target, callback });\n          return () => {\n            target.removeEventListener(eventType, callback);\n          };\n        },\n        removeAllListeners: () => {\n          for (const { target, eventType, callback } of this.listeners) {\n            target.removeEventListener(eventType, callback);\n          }\n          this.listeners = [];\n        },\n        once: (eventType) => {\n          const bindings = [];\n          return new Promise((resolve, reject) => {\n            const handleIncomingMessage = (event) => {\n              try {\n                const message = event.data;\n                if (message.type === eventType) {\n                  resolve(message);\n                }\n              } catch (error2) {\n                reject(error2);\n              }\n            };\n            bindings.push(\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                "message",\n                handleIncomingMessage\n              ),\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                "messageerror",\n                reject\n              )\n            );\n          }).finally(() => {\n            bindings.forEach((unbind) => unbind());\n          });\n        }\n      },\n      useFallbackMode: !("serviceWorker" in navigator) || location.protocol === "file:"\n    };\n    Object.defineProperties(context, {\n      requestHandlers: {\n        get: () => this.currentHandlers\n      }\n    });\n    this.startHandler = context.useFallbackMode ? createFallbackStart(context) : createStartHandler(context);\n    this.stopHandler = context.useFallbackMode ? createFallbackStop(context) : createStop(context);\n    return context;\n  }\n  async start(options = {}) {\n    this.context.startOptions = mergeRight(\n      DEFAULT_START_OPTIONS,\n      options\n    );\n    return await this.startHandler(this.context.startOptions, options);\n  }\n  printHandlers() {\n    const handlers = this.listHandlers();\n    handlers.forEach((handler) => {\n      const { header, callFrame } = handler.info;\n      const pragma = handler.info.hasOwnProperty("operationType") ? "[graphql]" : "[rest]";\n      console.groupCollapsed(`${pragma} ${header}`);\n      if (callFrame) {\n        console.log(`Declaration: ${callFrame}`);\n      }\n      console.log("Handler:", handler);\n      console.groupEnd();\n    });\n  }\n  stop() {\n    super.dispose();\n    this.context.events.removeAllListeners();\n    this.context.emitter.removeAllListeners();\n    this.stopHandler();\n  }\n};\nfunction setupWorker(...handlers) {\n  return new SetupWorkerApi(...handlers);\n}\n\n// src/rest.ts\nfunction createRestHandler(method) {\n  return (path, resolver) => {\n    return new RestHandler(method, path, resolver);\n  };\n}\nvar rest = {\n  all: createRestHandler(/.+/),\n  head: createRestHandler("HEAD" /* HEAD */),\n  get: createRestHandler("GET" /* GET */),\n  post: createRestHandler("POST" /* POST */),\n  put: createRestHandler("PUT" /* PUT */),\n  delete: createRestHandler("DELETE" /* DELETE */),\n  patch: createRestHandler("PATCH" /* PATCH */),\n  options: createRestHandler("OPTIONS" /* OPTIONS */)\n};\n\n// src/graphql.ts\nfunction createScopedGraphQLHandler(operationType, url) {\n  return (operationName, resolver) => {\n    return new GraphQLHandler(\n      operationType,\n      operationName,\n      url,\n      resolver\n    );\n  };\n}\nfunction createGraphQLOperationHandler(url) {\n  return (resolver) => {\n    return new GraphQLHandler(\n      "all",\n      new RegExp(".*"),\n      url,\n      resolver\n    );\n  };\n}\nvar standardGraphQLHandlers = {\n  operation: createGraphQLOperationHandler("*"),\n  query: createScopedGraphQLHandler("query", "*"),\n  mutation: createScopedGraphQLHandler("mutation", "*")\n};\nfunction createGraphQLLink(url) {\n  return {\n    operation: createGraphQLOperationHandler(url),\n    query: createScopedGraphQLHandler("query", url),\n    mutation: createScopedGraphQLHandler("mutation", url)\n  };\n}\nvar graphql = {\n  ...standardGraphQLHandlers,\n  link: createGraphQLLink\n};\n\n// src/index.ts\ncheckGlobals();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/index.js\n',
      );

      /***/
    },

  /***/ '(ssr)/./node_modules/msw/lib/node/index.mjs':
    /*!*********************************************!*\
  !*** ./node_modules/msw/lib/node/index.mjs ***!
  \*********************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SetupServerApi: () => (/* binding */ SetupServerApi),\n/* harmony export */   setupServer: () => (/* binding */ setupServer)\n/* harmony export */ });\n/* harmony import */ var timers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! timers */ "timers");\n/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chalk */ "(ssr)/./node_modules/chalk/source/index.js");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! outvariant */ "(ssr)/./node_modules/outvariant/lib/index.mjs");\n/* harmony import */ var _mswjs_interceptors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mswjs/interceptors */ "(ssr)/./node_modules/@mswjs/interceptors/lib/index.js");\n/* harmony import */ var strict_event_emitter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! strict-event-emitter */ "(ssr)/./node_modules/strict-event-emitter/lib/index.js");\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cookie */ "(ssr)/./node_modules/cookie/index.js");\n/* harmony import */ var _mswjs_cookies__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mswjs/cookies */ "(ssr)/./node_modules/@mswjs/cookies/lib/index.js");\n/* harmony import */ var _mswjs_interceptors_lib_utils_bufferUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mswjs/interceptors/lib/utils/bufferUtils.js */ "(ssr)/./node_modules/@mswjs/interceptors/lib/utils/bufferUtils.js");\n/* harmony import */ var headers_polyfill__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! headers-polyfill */ "(ssr)/./node_modules/headers-polyfill/lib/index.mjs");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @open-draft/until */ "(ssr)/./node_modules/@open-draft/until/lib/index.js");\n/* harmony import */ var js_levenshtein__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! js-levenshtein */ "(ssr)/./node_modules/js-levenshtein/index.js");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! graphql */ "(ssr)/./node_modules/graphql/index.js");\n/* harmony import */ var is_node_process__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! is-node-process */ "(ssr)/./node_modules/is-node-process/lib/index.mjs");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! path-to-regexp */ "(ssr)/./node_modules/path-to-regexp/dist/index.js");\n/* harmony import */ var _mswjs_interceptors_lib_utils_getCleanUrl_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @mswjs/interceptors/lib/utils/getCleanUrl.js */ "(ssr)/./node_modules/@mswjs/interceptors/lib/utils/getCleanUrl.js");\n/* harmony import */ var _mswjs_interceptors_lib_interceptors_ClientRequest_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @mswjs/interceptors/lib/interceptors/ClientRequest/index.js */ "(ssr)/./node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/index.js");\n/* harmony import */ var _mswjs_interceptors_lib_interceptors_XMLHttpRequest_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @mswjs/interceptors/lib/interceptors/XMLHttpRequest/index.js */ "(ssr)/./node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/index.js");\n/* harmony import */ var _mswjs_interceptors_lib_interceptors_fetch_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @mswjs/interceptors/lib/interceptors/fetch/index.js */ "(ssr)/./node_modules/@mswjs/interceptors/lib/interceptors/fetch/index.js");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== "undefined")\n    return require.apply(this, arguments);\n  throw new Error(\'Dynamic require of "\' + x + \'" is not supported\');\n});\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// config/polyfills-node.ts\n\nvar setTimeout = timers__WEBPACK_IMPORTED_MODULE_0__.setTimeout;\n\n// src/node/SetupServerApi.ts\n\n\n\n\n// src/SetupApi.ts\n\n\n\n// src/utils/internal/devUtils.ts\n\nvar LIBRARY_PREFIX = "[MSW]";\nfunction formatMessage(message, ...positionals) {\n  const interpolatedMessage = (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.format)(message, ...positionals);\n  return `${LIBRARY_PREFIX} ${interpolatedMessage}`;\n}\nfunction warn(message, ...positionals) {\n  console.warn(formatMessage(message, ...positionals));\n}\nfunction error(message, ...positionals) {\n  console.error(formatMessage(message, ...positionals));\n}\nvar devUtils = {\n  formatMessage,\n  warn,\n  error\n};\n\n// src/utils/internal/pipeEvents.ts\nfunction pipeEvents(source, destination) {\n  const rawEmit = source.emit;\n  if (rawEmit._isPiped) {\n    return;\n  }\n  source.emit = function(event, ...data2) {\n    destination.emit(event, ...data2);\n    return rawEmit.call(this, event, ...data2);\n  };\n  source.emit._isPiped = true;\n}\n\n// src/utils/internal/toReadonlyArray.ts\nfunction toReadonlyArray(source) {\n  const clone = [...source];\n  Object.freeze(clone);\n  return clone;\n}\n\n// src/SetupApi.ts\nvar SetupApi = class {\n  constructor(...initialHandlers) {\n    this.validateHandlers(...initialHandlers);\n    this.initialHandlers = toReadonlyArray(initialHandlers);\n    this.currentHandlers = [...initialHandlers];\n    this.emitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_4__.Emitter();\n    this.publicEmitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_4__.Emitter();\n    pipeEvents(this.emitter, this.publicEmitter);\n    this.events = this.createLifeCycleEvents();\n  }\n  validateHandlers(...handlers) {\n    for (const handler of handlers) {\n      (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n        !Array.isArray(handler),\n        devUtils.formatMessage(\n          \'Failed to construct "%s" given an Array of request handlers. Make sure you spread the request handlers when calling the respective setup function.\'\n        ),\n        this.constructor.name\n      );\n    }\n  }\n  dispose() {\n    this.emitter.removeAllListeners();\n    this.publicEmitter.removeAllListeners();\n  }\n  use(...runtimeHandlers) {\n    this.currentHandlers.unshift(...runtimeHandlers);\n  }\n  restoreHandlers() {\n    this.currentHandlers.forEach((handler) => {\n      handler.markAsSkipped(false);\n    });\n  }\n  resetHandlers(...nextHandlers) {\n    this.currentHandlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];\n  }\n  listHandlers() {\n    return toReadonlyArray(this.currentHandlers);\n  }\n  createLifeCycleEvents() {\n    return {\n      on: (...args) => {\n        return this.publicEmitter.on(...args);\n      },\n      removeListener: (...args) => {\n        return this.publicEmitter.removeListener(...args);\n      },\n      removeAllListeners: (...args) => {\n        return this.publicEmitter.removeAllListeners(...args);\n      }\n    };\n  }\n};\n\n// src/utils/internal/isObject.ts\nfunction isObject(value) {\n  return value != null && typeof value === "object" && !Array.isArray(value);\n}\n\n// src/utils/internal/mergeRight.ts\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce((result, [key, rightValue]) => {\n    const leftValue = result[key];\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue);\n      return result;\n    }\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue);\n      return result;\n    }\n    result[key] = rightValue;\n    return result;\n  }, Object.assign({}, left));\n}\n\n// src/utils/request/MockedRequest.ts\n\n\n\n\n\n\n// src/utils/request/getRequestCookies.ts\n\nfunction getAllCookies() {\n  return cookie__WEBPACK_IMPORTED_MODULE_5__.parse(document.cookie);\n}\nfunction getRequestCookies(request) {\n  if (typeof document === "undefined" || typeof location === "undefined") {\n    return {};\n  }\n  switch (request.credentials) {\n    case "same-origin": {\n      return location.origin === request.url.origin ? getAllCookies() : {};\n    }\n    case "include": {\n      return getAllCookies();\n    }\n    default: {\n      return {};\n    }\n  }\n}\n\n// src/utils/internal/jsonParse.ts\nfunction jsonParse(value) {\n  try {\n    return JSON.parse(value);\n  } catch (error2) {\n    return void 0;\n  }\n}\n\n// src/utils/internal/parseMultipartData.ts\n\nfunction parseContentHeaders(headersString) {\n  var _a, _b;\n  const headers = (0,headers_polyfill__WEBPACK_IMPORTED_MODULE_8__.stringToHeaders)(headersString);\n  const contentType = headers.get("content-type") || "text/plain";\n  const disposition = headers.get("content-disposition");\n  if (!disposition) {\n    throw new Error(\'"Content-Disposition" header is required.\');\n  }\n  const directives = disposition.split(";").reduce((acc, chunk) => {\n    const [name2, ...rest] = chunk.trim().split("=");\n    acc[name2] = rest.join("=");\n    return acc;\n  }, {});\n  const name = (_a = directives.name) == null ? void 0 : _a.slice(1, -1);\n  const filename = (_b = directives.filename) == null ? void 0 : _b.slice(1, -1);\n  return {\n    name,\n    filename,\n    contentType\n  };\n}\nfunction parseMultipartData(data2, headers) {\n  const contentType = headers == null ? void 0 : headers.get("content-type");\n  if (!contentType) {\n    return void 0;\n  }\n  const [, ...directives] = contentType.split(/; */);\n  const boundary = directives.filter((d) => d.startsWith("boundary=")).map((s) => s.replace(/^boundary=/, ""))[0];\n  if (!boundary) {\n    return void 0;\n  }\n  const boundaryRegExp = new RegExp(`--+${boundary}`);\n  const fields = data2.split(boundaryRegExp).filter((chunk) => chunk.startsWith("\\r\\n") && chunk.endsWith("\\r\\n")).map((chunk) => chunk.trimStart().replace(/\\r\\n$/, ""));\n  if (!fields.length) {\n    return void 0;\n  }\n  const parsedBody = {};\n  try {\n    for (const field2 of fields) {\n      const [contentHeaders, ...rest] = field2.split("\\r\\n\\r\\n");\n      const contentBody = rest.join("\\r\\n\\r\\n");\n      const { contentType: contentType2, filename, name } = parseContentHeaders(contentHeaders);\n      const value = filename === void 0 ? contentBody : new File([contentBody], filename, { type: contentType2 });\n      const parsedValue = parsedBody[name];\n      if (parsedValue === void 0) {\n        parsedBody[name] = value;\n      } else if (Array.isArray(parsedValue)) {\n        parsedBody[name] = [...parsedValue, value];\n      } else {\n        parsedBody[name] = [parsedValue, value];\n      }\n    }\n    return parsedBody;\n  } catch (error2) {\n    return void 0;\n  }\n}\n\n// src/utils/request/parseBody.ts\nfunction parseBody(body2, headers) {\n  var _a;\n  if (!body2) {\n    return body2;\n  }\n  const contentType = ((_a = headers == null ? void 0 : headers.get("content-type")) == null ? void 0 : _a.toLowerCase()) || "";\n  const hasMultipartContent = contentType.startsWith("multipart/form-data");\n  if (hasMultipartContent && typeof body2 !== "object") {\n    return parseMultipartData(body2.toString(), headers) || body2;\n  }\n  const hasJsonContent = contentType.includes("json");\n  if (hasJsonContent && typeof body2 !== "object") {\n    return jsonParse(body2.toString()) || body2;\n  }\n  return body2;\n}\n\n// src/utils/internal/isStringEqual.ts\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\n// src/utils/request/MockedRequest.ts\nvar MockedRequest = class extends _mswjs_interceptors__WEBPACK_IMPORTED_MODULE_3__.IsomorphicRequest {\n  constructor(url, init = {}) {\n    super(url, init);\n    if (init.id) {\n      this.id = init.id;\n    }\n    this.cache = init.cache || "default";\n    this.destination = init.destination || "";\n    this.integrity = init.integrity || "";\n    this.keepalive = init.keepalive || false;\n    this.mode = init.mode || "cors";\n    this.priority = init.priority || "auto";\n    this.redirect = init.redirect || "follow";\n    this.referrer = init.referrer || "";\n    this.referrerPolicy = init.referrerPolicy || "no-referrer";\n    this.cookies = init.cookies || this.getCookies();\n  }\n  get body() {\n    const text2 = (0,_mswjs_interceptors_lib_utils_bufferUtils_js__WEBPACK_IMPORTED_MODULE_7__.decodeBuffer)(this["_body"]);\n    const body2 = parseBody(text2, this.headers);\n    if (isStringEqual(this.method, "GET") && body2 === "") {\n      return void 0;\n    }\n    return body2;\n  }\n  passthrough() {\n    return {\n      status: 101,\n      statusText: "Continue",\n      headers: new headers_polyfill__WEBPACK_IMPORTED_MODULE_8__.Headers(),\n      body: null,\n      passthrough: true,\n      once: false\n    };\n  }\n  getCookies() {\n    var _a;\n    const requestCookiesString = this.headers.get("cookie");\n    const ownCookies = requestCookiesString ? cookie__WEBPACK_IMPORTED_MODULE_5__.parse(requestCookiesString) : {};\n    _mswjs_cookies__WEBPACK_IMPORTED_MODULE_6__.store.hydrate();\n    const cookiesFromStore = Array.from(\n      (_a = _mswjs_cookies__WEBPACK_IMPORTED_MODULE_6__.store.get({ ...this, url: this.url.href })) == null ? void 0 : _a.entries()\n    ).reduce((cookies, [name, { value }]) => {\n      return Object.assign(cookies, { [name.trim()]: value });\n    }, {});\n    const cookiesFromDocument = getRequestCookies(this);\n    const forwardedCookies = {\n      ...cookiesFromDocument,\n      ...cookiesFromStore\n    };\n    for (const [name, value] of Object.entries(forwardedCookies)) {\n      this.headers.append("cookie", `${name}=${value}`);\n    }\n    return {\n      ...forwardedCookies,\n      ...ownCookies\n    };\n  }\n};\n\n// src/utils/handleRequest.ts\n\n\n// src/utils/getResponse.ts\nvar getResponse = async (request, handlers, resolutionContext) => {\n  const relevantHandlers = handlers.filter((handler) => {\n    return handler.test(request, resolutionContext);\n  });\n  if (relevantHandlers.length === 0) {\n    return {\n      handler: void 0,\n      response: void 0\n    };\n  }\n  const result = await relevantHandlers.reduce(async (executionResult, handler) => {\n    const previousResults = await executionResult;\n    if (!!(previousResults == null ? void 0 : previousResults.response)) {\n      return executionResult;\n    }\n    const result2 = await handler.run(request, resolutionContext);\n    if (result2 === null || result2.handler.shouldSkip) {\n      return null;\n    }\n    if (!result2.response) {\n      return {\n        request: result2.request,\n        handler: result2.handler,\n        response: void 0,\n        parsedResult: result2.parsedResult\n      };\n    }\n    if (result2.response.once) {\n      handler.markAsSkipped(true);\n    }\n    return result2;\n  }, Promise.resolve(null));\n  if (!result) {\n    return {\n      handler: void 0,\n      response: void 0\n    };\n  }\n  return {\n    handler: result.handler,\n    publicRequest: result.request,\n    parsedRequest: result.parsedResult,\n    response: result.response\n  };\n};\n\n// src/utils/request/onUnhandledRequest.ts\n\n\n// src/utils/internal/parseGraphQLRequest.ts\n\n\n// src/utils/request/getPublicUrlFromRequest.ts\nvar getPublicUrlFromRequest = (request) => {\n  return request.referrer.startsWith(request.url.origin) ? request.url.pathname : new URL(\n    request.url.pathname,\n    `${request.url.protocol}//${request.url.host}`\n  ).href;\n};\n\n// src/utils/internal/parseGraphQLRequest.ts\nfunction parseDocumentNode(node) {\n  var _a;\n  const operationDef = node.definitions.find((def) => {\n    return def.kind === "OperationDefinition";\n  });\n  return {\n    operationType: operationDef == null ? void 0 : operationDef.operation,\n    operationName: (_a = operationDef == null ? void 0 : operationDef.name) == null ? void 0 : _a.value\n  };\n}\nfunction parseQuery(query) {\n  try {\n    const ast = (0,graphql__WEBPACK_IMPORTED_MODULE_11__.parse)(query);\n    return parseDocumentNode(ast);\n  } catch (error2) {\n    return error2;\n  }\n}\nfunction extractMultipartVariables(variables, map, files) {\n  const operations = { variables };\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key \'${key}\' .`);\n    }\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split(".").reverse();\n      const paths = reversedPaths.reverse();\n      let target = operations;\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property \'${paths}\' is not in operations.`);\n        }\n        target = target[path];\n      }\n      target[lastPath] = files[key];\n    }\n  }\n  return operations.variables;\n}\nfunction getGraphQLInput(request) {\n  var _a, _b;\n  switch (request.method) {\n    case "GET": {\n      const query = request.url.searchParams.get("query");\n      const variables = request.url.searchParams.get("variables") || "";\n      return {\n        query,\n        variables: jsonParse(variables)\n      };\n    }\n    case "POST": {\n      if ((_a = request.body) == null ? void 0 : _a.query) {\n        const { query, variables } = request.body;\n        return {\n          query,\n          variables\n        };\n      }\n      if ((_b = request.body) == null ? void 0 : _b.operations) {\n        const { operations, map, ...files } = request.body;\n        const parsedOperations = jsonParse(\n          operations\n        ) || {};\n        if (!parsedOperations.query) {\n          return null;\n        }\n        const parsedMap = jsonParse(map || "") || {};\n        const variables = parsedOperations.variables ? extractMultipartVariables(\n          parsedOperations.variables,\n          parsedMap,\n          files\n        ) : {};\n        return {\n          query: parsedOperations.query,\n          variables\n        };\n      }\n    }\n    default:\n      return null;\n  }\n}\nfunction parseGraphQLRequest(request) {\n  const input = getGraphQLInput(request);\n  if (!input || !input.query) {\n    return void 0;\n  }\n  const { query, variables } = input;\n  const parsedResult = parseQuery(query);\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = getPublicUrlFromRequest(request);\n    throw new Error(\n      devUtils.formatMessage(\n        \'Failed to intercept a GraphQL request to "%s %s": cannot parse query. See the error message from the parser below.\\n\\n%s\',\n        request.method,\n        requestPublicUrl,\n        parsedResult.message\n      )\n    );\n  }\n  return {\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables\n  };\n}\n\n// node_modules/.pnpm/statuses@2.0.1/node_modules/statuses/codes.json\nvar codes_default = {\n  "100": "Continue",\n  "101": "Switching Protocols",\n  "102": "Processing",\n  "103": "Early Hints",\n  "200": "OK",\n  "201": "Created",\n  "202": "Accepted",\n  "203": "Non-Authoritative Information",\n  "204": "No Content",\n  "205": "Reset Content",\n  "206": "Partial Content",\n  "207": "Multi-Status",\n  "208": "Already Reported",\n  "226": "IM Used",\n  "300": "Multiple Choices",\n  "301": "Moved Permanently",\n  "302": "Found",\n  "303": "See Other",\n  "304": "Not Modified",\n  "305": "Use Proxy",\n  "307": "Temporary Redirect",\n  "308": "Permanent Redirect",\n  "400": "Bad Request",\n  "401": "Unauthorized",\n  "402": "Payment Required",\n  "403": "Forbidden",\n  "404": "Not Found",\n  "405": "Method Not Allowed",\n  "406": "Not Acceptable",\n  "407": "Proxy Authentication Required",\n  "408": "Request Timeout",\n  "409": "Conflict",\n  "410": "Gone",\n  "411": "Length Required",\n  "412": "Precondition Failed",\n  "413": "Payload Too Large",\n  "414": "URI Too Long",\n  "415": "Unsupported Media Type",\n  "416": "Range Not Satisfiable",\n  "417": "Expectation Failed",\n  "418": "I\'m a Teapot",\n  "421": "Misdirected Request",\n  "422": "Unprocessable Entity",\n  "423": "Locked",\n  "424": "Failed Dependency",\n  "425": "Too Early",\n  "426": "Upgrade Required",\n  "428": "Precondition Required",\n  "429": "Too Many Requests",\n  "431": "Request Header Fields Too Large",\n  "451": "Unavailable For Legal Reasons",\n  "500": "Internal Server Error",\n  "501": "Not Implemented",\n  "502": "Bad Gateway",\n  "503": "Service Unavailable",\n  "504": "Gateway Timeout",\n  "505": "HTTP Version Not Supported",\n  "506": "Variant Also Negotiates",\n  "507": "Insufficient Storage",\n  "508": "Loop Detected",\n  "509": "Bandwidth Limit Exceeded",\n  "510": "Not Extended",\n  "511": "Network Authentication Required"\n};\n\n// src/context/status.ts\nvar status = (statusCode, statusText) => {\n  return (res) => {\n    res.status = statusCode;\n    res.statusText = statusText || codes_default[String(statusCode)];\n    return res;\n  };\n};\n\n// src/context/set.ts\n\nfunction set(...args) {\n  return (res) => {\n    const [name, value] = args;\n    if (typeof name === "string") {\n      res.headers.append(name, value);\n    } else {\n      const headers = (0,headers_polyfill__WEBPACK_IMPORTED_MODULE_8__.objectToHeaders)(name);\n      headers.forEach((value2, name2) => {\n        res.headers.append(name2, value2);\n      });\n    }\n    return res;\n  };\n}\n\n// src/context/cookie.ts\n\nvar cookie = (name, value, options) => {\n  return (res) => {\n    const serializedCookie = cookie__WEBPACK_IMPORTED_MODULE_5__.serialize(name, value, options);\n    res.headers.append("Set-Cookie", serializedCookie);\n    if (typeof document !== "undefined") {\n      document.cookie = serializedCookie;\n    }\n    return res;\n  };\n};\n\n// src/context/body.ts\nvar body = (value) => {\n  return (res) => {\n    res.body = value;\n    return res;\n  };\n};\n\n// src/context/json.ts\nvar json = (body2) => {\n  return (res) => {\n    res.headers.set("Content-Type", "application/json");\n    res.body = JSON.stringify(body2);\n    return res;\n  };\n};\n\n// src/context/data.ts\nvar data = (payload) => {\n  return (res) => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { data: payload });\n    return json(nextBody)(res);\n  };\n};\n\n// src/context/extensions.ts\nvar extensions = (payload) => {\n  return (res) => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { extensions: payload });\n    return json(nextBody)(res);\n  };\n};\n\n// src/context/delay.ts\n\nvar SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;\nvar MIN_SERVER_RESPONSE_TIME = 100;\nvar MAX_SERVER_RESPONSE_TIME = 400;\nvar NODE_SERVER_RESPONSE_TIME = 5;\nvar getRandomServerResponseTime = () => {\n  if ((0,is_node_process__WEBPACK_IMPORTED_MODULE_12__.isNodeProcess)()) {\n    return NODE_SERVER_RESPONSE_TIME;\n  }\n  return Math.floor(\n    Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME\n  );\n};\nvar delay = (durationOrMode) => {\n  return (res) => {\n    let delayTime;\n    if (typeof durationOrMode === "string") {\n      switch (durationOrMode) {\n        case "infinite": {\n          delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;\n          break;\n        }\n        case "real": {\n          delayTime = getRandomServerResponseTime();\n          break;\n        }\n        default: {\n          throw new Error(\n            `Failed to delay a response: unknown delay mode "${durationOrMode}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`\n          );\n        }\n      }\n    } else if (typeof durationOrMode === "undefined") {\n      delayTime = getRandomServerResponseTime();\n    } else {\n      if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {\n        throw new Error(\n          `Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for "setTimeout" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`\n        );\n      }\n      delayTime = durationOrMode;\n    }\n    res.delay = delayTime;\n    return res;\n  };\n};\n\n// src/context/errors.ts\nvar errors = (errorsList) => {\n  return (res) => {\n    if (errorsList == null) {\n      return res;\n    }\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { errors: errorsList });\n    return json(nextBody)(res);\n  };\n};\n\n// src/context/fetch.ts\n\n\nvar useFetch = (0,is_node_process__WEBPACK_IMPORTED_MODULE_12__.isNodeProcess)() ? (input, init) => Promise.resolve().then(() => __toESM(__require("node-fetch"))).then(\n  ({ default: nodeFetch }) => nodeFetch(input, init)\n) : globalThis.fetch;\nvar augmentRequestInit = (requestInit) => {\n  const headers = new headers_polyfill__WEBPACK_IMPORTED_MODULE_8__.Headers(requestInit.headers);\n  headers.set("x-msw-bypass", "true");\n  return {\n    ...requestInit,\n    headers: headers.all()\n  };\n};\nvar createFetchRequestParameters = (input) => {\n  const { body: body2, method } = input;\n  const requestParameters = {\n    ...input,\n    body: void 0\n  };\n  if (["GET", "HEAD"].includes(method)) {\n    return requestParameters;\n  }\n  if (typeof body2 === "object" || typeof body2 === "number" || typeof body2 === "boolean") {\n    requestParameters.body = JSON.stringify(body2);\n  } else {\n    requestParameters.body = body2;\n  }\n  return requestParameters;\n};\nvar fetch = (input, requestInit = {}) => {\n  if (typeof input === "string") {\n    return useFetch(input, augmentRequestInit(requestInit));\n  }\n  const requestParameters = createFetchRequestParameters(input);\n  const derivedRequestInit = augmentRequestInit(requestParameters);\n  return useFetch(input.url.href, derivedRequestInit);\n};\n\n// src/context/text.ts\nvar text = (body2) => {\n  return (res) => {\n    res.headers.set("Content-Type", "text/plain");\n    res.body = body2;\n    return res;\n  };\n};\n\n// src/context/xml.ts\nvar xml = (body2) => {\n  return (res) => {\n    res.headers.set("Content-Type", "text/xml");\n    res.body = body2;\n    return res;\n  };\n};\n\n// src/utils/logging/getStatusCodeColor.ts\nfunction getStatusCodeColor(status2) {\n  if (status2 < 300) {\n    return "#69AB32" /* Success */;\n  }\n  if (status2 < 400) {\n    return "#F0BB4B" /* Warning */;\n  }\n  return "#E95F5D" /* Danger */;\n}\n\n// src/utils/logging/getTimestamp.ts\nfunction getTimestamp() {\n  const now = new Date();\n  return [now.getHours(), now.getMinutes(), now.getSeconds()].map(String).map((chunk) => chunk.slice(0, 2)).map((chunk) => chunk.padStart(2, "0")).join(":");\n}\n\n// src/utils/logging/prepareRequest.ts\nfunction prepareRequest(request) {\n  return {\n    ...request,\n    body: request.body,\n    headers: request.headers.all()\n  };\n}\n\n// src/utils/logging/prepareResponse.ts\n\nfunction prepareResponse(res) {\n  const responseHeaders = (0,headers_polyfill__WEBPACK_IMPORTED_MODULE_8__.objectToHeaders)(res.headers);\n  const parsedBody = parseBody(res.body, responseHeaders);\n  return {\n    ...res,\n    body: parsedBody\n  };\n}\n\n// src/utils/matching/matchRequestUrl.ts\n\n\n\n// src/utils/url/cleanUrl.ts\nvar REDUNDANT_CHARACTERS_EXP = /[\\?|#].*$/g;\nfunction getSearchParams(path) {\n  return new URL(`/${path}`, "http://localhost").searchParams;\n}\nfunction cleanUrl(path) {\n  return path.replace(REDUNDANT_CHARACTERS_EXP, "");\n}\n\n// src/utils/url/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n}\n\n// src/utils/url/getAbsoluteUrl.ts\nfunction getAbsoluteUrl(path, baseUrl) {\n  if (isAbsoluteUrl(path)) {\n    return path;\n  }\n  if (path.startsWith("*")) {\n    return path;\n  }\n  const origin = baseUrl || typeof document !== "undefined" && document.baseURI;\n  return origin ? decodeURI(new URL(encodeURI(path), origin).href) : path;\n}\n\n// src/utils/matching/normalizePath.ts\nfunction normalizePath(path, baseUrl) {\n  if (path instanceof RegExp) {\n    return path;\n  }\n  const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl);\n  return cleanUrl(maybeAbsoluteUrl);\n}\n\n// src/utils/matching/matchRequestUrl.ts\nfunction coercePath(path) {\n  return path.replace(\n    /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n    (_, parameterName, wildcard) => {\n      const expression = "(.*)";\n      if (!parameterName) {\n        return expression;\n      }\n      return parameterName.startsWith(":") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;\n    }\n  ).replace(/([^\\/])(:)(?=\\d+)/, "$1\\\\$2").replace(/^([^\\/]+)(:)(?=\\/\\/)/, "$1\\\\$2");\n}\nfunction matchRequestUrl(url, path, baseUrl) {\n  const normalizedPath = normalizePath(path, baseUrl);\n  const cleanPath = typeof normalizedPath === "string" ? coercePath(normalizedPath) : normalizedPath;\n  const cleanUrl2 = (0,_mswjs_interceptors_lib_utils_getCleanUrl_js__WEBPACK_IMPORTED_MODULE_13__.getCleanUrl)(url);\n  const result = (0,path_to_regexp__WEBPACK_IMPORTED_MODULE_14__.match)(cleanPath, { decode: decodeURIComponent })(cleanUrl2);\n  const params = result && result.params || {};\n  return {\n    matches: result !== false,\n    params\n  };\n}\n\n// src/handlers/RequestHandler.ts\n\n\n// src/response.ts\n\n\n// src/utils/internal/compose.ts\nfunction compose(...fns) {\n  return (...args) => {\n    return fns.reduceRight((leftFn, rightFn) => {\n      return leftFn instanceof Promise ? Promise.resolve(leftFn).then(rightFn) : rightFn(leftFn);\n    }, args[0]);\n  };\n}\n\n// src/utils/NetworkError.ts\nvar NetworkError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "NetworkError";\n  }\n};\n\n// src/response.ts\nvar defaultResponse = {\n  status: 200,\n  statusText: "OK",\n  body: null,\n  delay: 0,\n  once: false,\n  passthrough: false\n};\nvar defaultResponseTransformers = [];\nfunction createResponseComposition(responseOverrides, defaultTransformers = defaultResponseTransformers) {\n  return async (...transformers) => {\n    const initialResponse = Object.assign(\n      {},\n      defaultResponse,\n      {\n        headers: new headers_polyfill__WEBPACK_IMPORTED_MODULE_8__.Headers({\n          "x-powered-by": "msw"\n        })\n      },\n      responseOverrides\n    );\n    const resolvedTransformers = [\n      ...defaultTransformers,\n      ...transformers\n    ].filter(Boolean);\n    const resolvedResponse = resolvedTransformers.length > 0 ? compose(...resolvedTransformers)(initialResponse) : initialResponse;\n    return resolvedResponse;\n  };\n}\nvar response = Object.assign(createResponseComposition(), {\n  once: createResponseComposition({ once: true }),\n  networkError(message) {\n    throw new NetworkError(message);\n  }\n});\n\n// src/utils/internal/getCallFrame.ts\nvar SOURCE_FRAME = /[\\/\\\\]msw[\\/\\\\]src[\\/\\\\](.+)/;\nvar BUILD_FRAME = /(node_modules)?[\\/\\\\]lib[\\/\\\\](umd|esm|iief|cjs)[\\/\\\\]|^[^\\/\\\\]*$/;\nfunction getCallFrame(error2) {\n  const stack = error2.stack;\n  if (!stack) {\n    return;\n  }\n  const frames = stack.split("\\n").slice(1);\n  const declarationFrame = frames.find((frame) => {\n    return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame));\n  });\n  if (!declarationFrame) {\n    return;\n  }\n  const declarationPath = declarationFrame.replace(/\\s*at [^()]*\\(([^)]+)\\)/, "$1").replace(/^@/, "");\n  return declarationPath;\n}\n\n// src/utils/internal/isIterable.ts\nfunction isIterable(fn) {\n  if (!fn) {\n    return false;\n  }\n  return typeof fn[Symbol.iterator] == "function";\n}\n\n// src/handlers/RequestHandler.ts\nvar defaultContext = {\n  status,\n  set,\n  delay,\n  fetch\n};\nvar RequestHandler = class {\n  constructor(options) {\n    this.shouldSkip = false;\n    this.ctx = options.ctx || defaultContext;\n    this.resolver = options.resolver;\n    const callFrame = getCallFrame(new Error());\n    this.info = {\n      ...options.info,\n      callFrame\n    };\n  }\n  parse(_request, _resolutionContext) {\n    return null;\n  }\n  test(request, resolutionContext) {\n    return this.predicate(\n      request,\n      this.parse(request, resolutionContext),\n      resolutionContext\n    );\n  }\n  getPublicRequest(request, _parsedResult) {\n    return request;\n  }\n  markAsSkipped(shouldSkip = true) {\n    this.shouldSkip = shouldSkip;\n  }\n  async run(request, resolutionContext) {\n    if (this.shouldSkip) {\n      return null;\n    }\n    const parsedResult = this.parse(request, resolutionContext);\n    const shouldIntercept = this.predicate(\n      request,\n      parsedResult,\n      resolutionContext\n    );\n    if (!shouldIntercept) {\n      return null;\n    }\n    const publicRequest = this.getPublicRequest(request, parsedResult);\n    const executeResolver = this.wrapResolver(this.resolver);\n    const mockedResponse = await executeResolver(\n      publicRequest,\n      response,\n      this.ctx\n    );\n    return this.createExecutionResult(\n      parsedResult,\n      publicRequest,\n      mockedResponse\n    );\n  }\n  wrapResolver(resolver) {\n    return async (req, res, ctx) => {\n      const result = this.resolverGenerator || await resolver(req, res, ctx);\n      if (isIterable(result)) {\n        const { value, done } = result[Symbol.iterator]().next();\n        const nextResponse = await value;\n        if (!nextResponse && done) {\n          return this.resolverGeneratorResult;\n        }\n        if (!this.resolverGenerator) {\n          this.resolverGenerator = result;\n        }\n        this.resolverGeneratorResult = nextResponse;\n        return nextResponse;\n      }\n      return result;\n    };\n  }\n  createExecutionResult(parsedResult, request, response2) {\n    return {\n      handler: this,\n      parsedResult: parsedResult || null,\n      request,\n      response: response2 || null\n    };\n  }\n};\n\n// src/handlers/RestHandler.ts\nvar restContext = {\n  ...defaultContext,\n  cookie,\n  body,\n  text,\n  json,\n  xml\n};\nvar RestRequest = class extends MockedRequest {\n  constructor(request, params) {\n    super(request.url, {\n      ...request,\n      body: request["_body"]\n    });\n    this.params = params;\n    this.id = request.id;\n  }\n};\nvar RestHandler = class extends RequestHandler {\n  constructor(method, path, resolver) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      ctx: restContext,\n      resolver\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const { method, path } = this.info;\n    if (path instanceof RegExp) {\n      return;\n    }\n    const url = cleanUrl(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for "${method} ${path}". Please match against a path instead and access query parameters in the response resolver function using "req.url.searchParams".`\n    );\n  }\n  parse(request, resolutionContext) {\n    return matchRequestUrl(\n      request.url,\n      this.info.path,\n      resolutionContext == null ? void 0 : resolutionContext.baseUrl\n    );\n  }\n  getPublicRequest(request, parsedResult) {\n    return new RestRequest(request, parsedResult.params || {});\n  }\n  predicate(request, parsedResult) {\n    const matchesMethod = this.info.method instanceof RegExp ? this.info.method.test(request.method) : isStringEqual(this.info.method, request.method);\n    return matchesMethod && parsedResult.matches;\n  }\n  log(request, response2) {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response2);\n    const statusColor = getStatusCodeColor(response2.status);\n    console.groupCollapsed(\n      devUtils.formatMessage("%s %s %s (%c%s%c)"),\n      getTimestamp(),\n      request.method,\n      publicUrl,\n      `color:${statusColor}`,\n      `${response2.status} ${response2.statusText}`,\n      "color:inherit"\n    );\n    console.log("Request", loggedRequest);\n    console.log("Handler:", this);\n    console.log("Response", loggedResponse);\n    console.groupEnd();\n  }\n};\n\n// src/context/field.ts\n\nvar field = (fieldName, fieldValue) => {\n  return (res) => {\n    validateFieldName(fieldName);\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, { [fieldName]: fieldValue });\n    return json(nextBody)(res);\n  };\n};\nfunction validateFieldName(fieldName) {\n  (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n    fieldName.trim() !== "",\n    devUtils.formatMessage(\n      "Failed to set a custom field on a GraphQL response: field name cannot be empty."\n    )\n  );\n  (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n    fieldName !== "data",\n    devUtils.formatMessage(\n      \'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.data()" instead?\',\n      fieldName\n    )\n  );\n  (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n    fieldName !== "errors",\n    devUtils.formatMessage(\n      \'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.errors()" instead?\',\n      fieldName\n    )\n  );\n  (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n    fieldName !== "extensions",\n    devUtils.formatMessage(\n      \'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.extensions()" instead?\',\n      fieldName\n    )\n  );\n}\n\n// src/utils/internal/tryCatch.ts\nfunction tryCatch(fn, onException) {\n  try {\n    const result = fn();\n    return result;\n  } catch (error2) {\n    onException == null ? void 0 : onException(error2);\n  }\n}\n\n// src/handlers/GraphQLHandler.ts\nvar graphqlContext = {\n  ...defaultContext,\n  data,\n  extensions,\n  errors,\n  cookie,\n  field\n};\nfunction isDocumentNode(value) {\n  if (value == null) {\n    return false;\n  }\n  return typeof value === "object" && "kind" in value && "definitions" in value;\n}\nvar GraphQLRequest = class extends MockedRequest {\n  constructor(request, variables, operationName) {\n    super(request.url, {\n      ...request,\n      body: request["_body"]\n    });\n    this.variables = variables;\n    this.operationName = operationName;\n  }\n};\nvar GraphQLHandler = class extends RequestHandler {\n  constructor(operationType, operationName, endpoint, resolver) {\n    let resolvedOperationName = operationName;\n    if (isDocumentNode(operationName)) {\n      const parsedNode = parseDocumentNode(operationName);\n      if (parsedNode.operationType !== operationType) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected "${operationType}", but got "${parsedNode.operationType}").`\n        );\n      }\n      if (!parsedNode.operationName) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`\n        );\n      }\n      resolvedOperationName = parsedNode.operationName;\n    }\n    const header = operationType === "all" ? `${operationType} (origin: ${endpoint.toString()})` : `${operationType} ${resolvedOperationName} (origin: ${endpoint.toString()})`;\n    super({\n      info: {\n        header,\n        operationType,\n        operationName: resolvedOperationName\n      },\n      ctx: graphqlContext,\n      resolver\n    });\n    this.endpoint = endpoint;\n  }\n  parse(request) {\n    return tryCatch(\n      () => parseGraphQLRequest(request),\n      (error2) => console.error(error2.message)\n    );\n  }\n  getPublicRequest(request, parsedResult) {\n    var _a, _b;\n    return new GraphQLRequest(\n      request,\n      (_a = parsedResult == null ? void 0 : parsedResult.variables) != null ? _a : {},\n      (_b = parsedResult == null ? void 0 : parsedResult.operationName) != null ? _b : ""\n    );\n  }\n  predicate(request, parsedResult) {\n    if (!parsedResult) {\n      return false;\n    }\n    if (!parsedResult.operationName && this.info.operationType !== "all") {\n      const publicUrl = getPublicUrlFromRequest(request);\n      devUtils.warn(`Failed to intercept a GraphQL request at "${request.method} ${publicUrl}": anonymous GraphQL operations are not supported.\n\nConsider naming this operation or using "graphql.operation()" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation      `);\n      return false;\n    }\n    const hasMatchingUrl = matchRequestUrl(request.url, this.endpoint);\n    const hasMatchingOperationType = this.info.operationType === "all" || parsedResult.operationType === this.info.operationType;\n    const hasMatchingOperationName = this.info.operationName instanceof RegExp ? this.info.operationName.test(parsedResult.operationName || "") : parsedResult.operationName === this.info.operationName;\n    return hasMatchingUrl.matches && hasMatchingOperationType && hasMatchingOperationName;\n  }\n  log(request, response2, parsedRequest) {\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response2);\n    const statusColor = getStatusCodeColor(response2.status);\n    const requestInfo = (parsedRequest == null ? void 0 : parsedRequest.operationName) ? `${parsedRequest == null ? void 0 : parsedRequest.operationType} ${parsedRequest == null ? void 0 : parsedRequest.operationName}` : `anonymous ${parsedRequest == null ? void 0 : parsedRequest.operationType}`;\n    console.groupCollapsed(\n      devUtils.formatMessage("%s %s (%c%s%c)"),\n      getTimestamp(),\n      `${requestInfo}`,\n      `color:${statusColor}`,\n      `${response2.status} ${response2.statusText}`,\n      "color:inherit"\n    );\n    console.log("Request:", loggedRequest);\n    console.log("Handler:", this);\n    console.log("Response:", loggedResponse);\n    console.groupEnd();\n  }\n};\n\n// src/utils/request/onUnhandledRequest.ts\nvar MAX_MATCH_SCORE = 3;\nvar MAX_SUGGESTION_COUNT = 4;\nvar TYPE_MATCH_DELTA = 0.5;\nfunction groupHandlersByType(handlers) {\n  return handlers.reduce(\n    (groups, handler) => {\n      if (handler instanceof RestHandler) {\n        groups.rest.push(handler);\n      }\n      if (handler instanceof GraphQLHandler) {\n        groups.graphql.push(handler);\n      }\n      return groups;\n    },\n    {\n      rest: [],\n      graphql: []\n    }\n  );\n}\nfunction getRestHandlerScore() {\n  return (request, handler) => {\n    const { path, method } = handler.info;\n    if (path instanceof RegExp || method instanceof RegExp) {\n      return Infinity;\n    }\n    const hasSameMethod = isStringEqual(request.method, method);\n    const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0;\n    const requestPublicUrl = getPublicUrlFromRequest(request);\n    const score = js_levenshtein__WEBPACK_IMPORTED_MODULE_10__(requestPublicUrl, path);\n    return score - methodScoreDelta;\n  };\n}\nfunction getGraphQLHandlerScore(parsedQuery) {\n  return (_, handler) => {\n    if (typeof parsedQuery.operationName === "undefined") {\n      return Infinity;\n    }\n    const { operationType, operationName } = handler.info;\n    if (typeof operationName !== "string") {\n      return Infinity;\n    }\n    const hasSameOperationType = parsedQuery.operationType === operationType;\n    const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0;\n    const score = js_levenshtein__WEBPACK_IMPORTED_MODULE_10__(parsedQuery.operationName, operationName);\n    return score - operationTypeScoreDelta;\n  };\n}\nfunction getSuggestedHandler(request, handlers, getScore) {\n  const suggestedHandlers = handlers.reduce((suggestions, handler) => {\n    const score = getScore(request, handler);\n    return suggestions.concat([[score, handler]]);\n  }, []).sort(([leftScore], [rightScore]) => leftScore - rightScore).filter(([score]) => score <= MAX_MATCH_SCORE).slice(0, MAX_SUGGESTION_COUNT).map(([, handler]) => handler);\n  return suggestedHandlers;\n}\nfunction getSuggestedHandlersMessage(handlers) {\n  if (handlers.length > 1) {\n    return `Did you mean to request one of the following resources instead?\n\n${handlers.map((handler) => `  \\u2022 ${handler.info.header}`).join("\\n")}`;\n  }\n  return `Did you mean to request "${handlers[0].info.header}" instead?`;\n}\nfunction onUnhandledRequest(request, handlers, strategy = "warn") {\n  const parsedGraphQLQuery = tryCatch(() => parseGraphQLRequest(request));\n  function generateHandlerSuggestion() {\n    const handlerGroups = groupHandlersByType(handlers);\n    const relevantHandlers = parsedGraphQLQuery ? handlerGroups.graphql : handlerGroups.rest;\n    const suggestedHandlers = getSuggestedHandler(\n      request,\n      relevantHandlers,\n      parsedGraphQLQuery ? getGraphQLHandlerScore(parsedGraphQLQuery) : getRestHandlerScore()\n    );\n    return suggestedHandlers.length > 0 ? getSuggestedHandlersMessage(suggestedHandlers) : "";\n  }\n  function generateUnhandledRequestMessage() {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const requestHeader = parsedGraphQLQuery ? `${parsedGraphQLQuery.operationType} ${parsedGraphQLQuery.operationName} (${request.method} ${publicUrl})` : `${request.method} ${publicUrl}`;\n    const handlerSuggestion = generateHandlerSuggestion();\n    const messageTemplate = [\n      `captured a request without a matching request handler:`,\n      `  \\u2022 ${requestHeader}`,\n      handlerSuggestion,\n      `If you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/getting-started/mocks`\n    ].filter(Boolean);\n    return messageTemplate.join("\\n\\n");\n  }\n  function applyStrategy(strategy2) {\n    const message = generateUnhandledRequestMessage();\n    switch (strategy2) {\n      case "error": {\n        devUtils.error("Error: %s", message);\n        throw new Error(\n          devUtils.formatMessage(\n            \'Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.\'\n          )\n        );\n      }\n      case "warn": {\n        devUtils.warn("Warning: %s", message);\n        break;\n      }\n      case "bypass":\n        break;\n      default:\n        throw new Error(\n          devUtils.formatMessage(\n            \'Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.\',\n            strategy2\n          )\n        );\n    }\n  }\n  if (typeof strategy === "function") {\n    strategy(request, {\n      warning: applyStrategy.bind(null, "warn"),\n      error: applyStrategy.bind(null, "error")\n    });\n    return;\n  }\n  applyStrategy(strategy);\n}\n\n// src/utils/request/readResponseCookies.ts\n\nfunction readResponseCookies(request, response2) {\n  _mswjs_cookies__WEBPACK_IMPORTED_MODULE_6__.store.add({ ...request, url: request.url.toString() }, response2);\n  _mswjs_cookies__WEBPACK_IMPORTED_MODULE_6__.store.persist();\n}\n\n// src/utils/handleRequest.ts\nasync function handleRequest(request, handlers, options, emitter, handleRequestOptions) {\n  var _a, _b, _c, _d, _e, _f;\n  emitter.emit("request:start", request);\n  if (request.headers.get("x-msw-bypass") === "true") {\n    emitter.emit("request:end", request);\n    (_a = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _a.call(handleRequestOptions, request);\n    return;\n  }\n  const [lookupError, lookupResult] = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_9__.until)(() => {\n    return getResponse(\n      request,\n      handlers,\n      handleRequestOptions == null ? void 0 : handleRequestOptions.resolutionContext\n    );\n  });\n  if (lookupError) {\n    emitter.emit("unhandledException", lookupError, request);\n    throw lookupError;\n  }\n  const { handler, response: response2 } = lookupResult;\n  if (!handler) {\n    onUnhandledRequest(request, handlers, options.onUnhandledRequest);\n    emitter.emit("request:unhandled", request);\n    emitter.emit("request:end", request);\n    (_b = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _b.call(handleRequestOptions, request);\n    return;\n  }\n  if (!response2) {\n    devUtils.warn(\n      `Expected response resolver to return a mocked response Object, but got %s. The original response is going to be used instead.\n\n  \\u2022 %s\n    %s`,\n      response2,\n      handler.info.header,\n      handler.info.callFrame\n    );\n    emitter.emit("request:end", request);\n    (_c = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _c.call(handleRequestOptions, request);\n    return;\n  }\n  if (response2.passthrough) {\n    emitter.emit("request:end", request);\n    (_d = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _d.call(handleRequestOptions, request);\n    return;\n  }\n  readResponseCookies(request, response2);\n  emitter.emit("request:match", request);\n  const requiredLookupResult = lookupResult;\n  const transformedResponse = ((_e = handleRequestOptions == null ? void 0 : handleRequestOptions.transformResponse) == null ? void 0 : _e.call(handleRequestOptions, response2)) || response2;\n  (_f = handleRequestOptions == null ? void 0 : handleRequestOptions.onMockedResponse) == null ? void 0 : _f.call(\n    handleRequestOptions,\n    transformedResponse,\n    requiredLookupResult\n  );\n  emitter.emit("request:end", request);\n  return transformedResponse;\n}\n\n// src/node/SetupServerApi.ts\nvar { bold } = chalk__WEBPACK_IMPORTED_MODULE_1__;\nvar DEFAULT_LISTEN_OPTIONS = {\n  onUnhandledRequest: "warn"\n};\nvar SetupServerApi = class extends SetupApi {\n  constructor(interceptors, ...handlers) {\n    super(...handlers);\n    this.interceptor = new _mswjs_interceptors__WEBPACK_IMPORTED_MODULE_3__.BatchInterceptor({\n      name: "setup-server",\n      interceptors: interceptors.map((Interceptor2) => new Interceptor2())\n    });\n    this.resolvedOptions = {};\n    this.init();\n  }\n  init() {\n    this.interceptor.on("request", async (request) => {\n      const mockedRequest = new MockedRequest(request.url, {\n        ...request,\n        body: await request.arrayBuffer()\n      });\n      const response2 = await handleRequest(\n        mockedRequest,\n        this.currentHandlers,\n        this.resolvedOptions,\n        this.emitter,\n        {\n          transformResponse(response3) {\n            return {\n              status: response3.status,\n              statusText: response3.statusText,\n              headers: response3.headers.all(),\n              body: response3.body,\n              delay: response3.delay\n            };\n          }\n        }\n      );\n      if (response2) {\n        if (response2.delay) {\n          await new Promise((resolve) => {\n            setTimeout(resolve, response2.delay);\n          });\n        }\n        request.respondWith(response2);\n      }\n      return;\n    });\n    this.interceptor.on("response", (request, response2) => {\n      if (!request.id) {\n        return;\n      }\n      if (response2.headers.get("x-powered-by") === "msw") {\n        this.emitter.emit("response:mocked", response2, request.id);\n      } else {\n        this.emitter.emit("response:bypass", response2, request.id);\n      }\n    });\n  }\n  listen(options = {}) {\n    this.resolvedOptions = mergeRight(\n      DEFAULT_LISTEN_OPTIONS,\n      options\n    );\n    this.interceptor.apply();\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n      [_mswjs_interceptors__WEBPACK_IMPORTED_MODULE_3__.InterceptorReadyState.APPLYING, _mswjs_interceptors__WEBPACK_IMPORTED_MODULE_3__.InterceptorReadyState.APPLIED].includes(\n        this.interceptor.readyState\n      ),\n      devUtils.formatMessage(\n        \'Failed to start "setupServer": the interceptor failed to apply. This is likely an issue with the library and you should report it at "%s".\'\n      ),\n      "https://github.com/mswjs/msw/issues/new/choose"\n    );\n  }\n  printHandlers() {\n    const handlers = this.listHandlers();\n    handlers.forEach((handler) => {\n      const { header, callFrame } = handler.info;\n      const pragma = handler.info.hasOwnProperty("operationType") ? "[graphql]" : "[rest]";\n      console.log(`${bold(`${pragma} ${header}`)}\n  Declaration: ${callFrame}\n`);\n    });\n  }\n  close() {\n    super.dispose();\n    this.interceptor.dispose();\n  }\n};\n\n// src/node/setupServer.ts\n\n\n\nvar setupServer = (...handlers) => {\n  return new SetupServerApi(\n    [_mswjs_interceptors_lib_interceptors_ClientRequest_index_js__WEBPACK_IMPORTED_MODULE_15__.ClientRequestInterceptor, _mswjs_interceptors_lib_interceptors_XMLHttpRequest_index_js__WEBPACK_IMPORTED_MODULE_16__.XMLHttpRequestInterceptor, _mswjs_interceptors_lib_interceptors_fetch_index_js__WEBPACK_IMPORTED_MODULE_17__.FetchInterceptor],\n    ...handlers\n  );\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/node/index.mjs\n',
      );

      /***/
    },
};
