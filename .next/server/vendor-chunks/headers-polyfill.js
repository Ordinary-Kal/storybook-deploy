/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = 'vendor-chunks/headers-polyfill';
exports.ids = ['vendor-chunks/headers-polyfill'];
exports.modules = {
  /***/ '(ssr)/./node_modules/headers-polyfill/lib/index.js':
    /*!****************************************************!*\
  !*** ./node_modules/headers-polyfill/lib/index.js ***!
  \****************************************************/
    /***/ (module) => {
      eval(
        'function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError("Cannot call a class as a function");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ("value" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _instanceof(left, right) {\n    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i["return"] != null) _i["return"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === "string") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === "Object" && o.constructor) n = o.constructor.name;\n    if (n === "Map" || n === "Set") return Array.from(n);\n    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction _ts_generator(thisArg, body) {\n    var f, y, t, g, _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return g = {\n        next: verb(0),\n        "throw": verb(1),\n        "return": verb(2)\n    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = function(cb, mod) {\n    return function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\n};\nvar __export = function(target, all) {\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = function(to, from, except, desc) {\n    if (from && typeof from === "object" || typeof from === "function") {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            var _loop = function() {\n                var key = _step.value;\n                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n                    get: function() {\n                        return from[key];\n                    },\n                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n                });\n            };\n            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n    return to;\n};\nvar __toESM = function(mod, isNodeMode, target) {\n    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {\n        value: mod,\n        enumerable: true\n    }) : target, mod);\n};\nvar __toCommonJS = function(mod) {\n    return __copyProps(__defProp({}, "__esModule", {\n        value: true\n    }), mod);\n};\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n    "node_modules/set-cookie-parser/lib/set-cookie.js": function(exports, module2) {\n        "use strict";\n        var isNonEmptyString = function isNonEmptyString(str) {\n            return typeof str === "string" && !!str.trim();\n        };\n        var parseString = function parseString(setCookieValue, options) {\n            var parts = setCookieValue.split(";").filter(isNonEmptyString);\n            var nameValuePairStr = parts.shift();\n            var parsed = parseNameValuePair(nameValuePairStr);\n            var name = parsed.name;\n            var value = parsed.value;\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            try {\n                value = options.decodeValues ? decodeURIComponent(value) : value;\n            } catch (e) {\n                console.error("set-cookie-parser encountered an error while decoding a cookie with value \'" + value + "\'. Set options.decodeValues to false to disable this feature.", e);\n            }\n            var cookie = {\n                name: name,\n                value: value\n            };\n            parts.forEach(function(part) {\n                var sides = part.split("=");\n                var key = sides.shift().trimLeft().toLowerCase();\n                var value2 = sides.join("=");\n                if (key === "expires") {\n                    cookie.expires = new Date(value2);\n                } else if (key === "max-age") {\n                    cookie.maxAge = parseInt(value2, 10);\n                } else if (key === "secure") {\n                    cookie.secure = true;\n                } else if (key === "httponly") {\n                    cookie.httpOnly = true;\n                } else if (key === "samesite") {\n                    cookie.sameSite = value2;\n                } else {\n                    cookie[key] = value2;\n                }\n            });\n            return cookie;\n        };\n        var parseNameValuePair = function parseNameValuePair(nameValuePairStr) {\n            var name = "";\n            var value = "";\n            var nameValueArr = nameValuePairStr.split("=");\n            if (nameValueArr.length > 1) {\n                name = nameValueArr.shift();\n                value = nameValueArr.join("=");\n            } else {\n                value = nameValuePairStr;\n            }\n            return {\n                name: name,\n                value: value\n            };\n        };\n        var parse = function parse(input, options) {\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            if (!input) {\n                if (!options.map) {\n                    return [];\n                } else {\n                    return {};\n                }\n            }\n            if (input.headers) {\n                if (typeof input.headers.getSetCookie === "function") {\n                    input = input.headers.getSetCookie();\n                } else if (input.headers["set-cookie"]) {\n                    input = input.headers["set-cookie"];\n                } else {\n                    var sch = input.headers[Object.keys(input.headers).find(function(key) {\n                        return key.toLowerCase() === "set-cookie";\n                    })];\n                    if (!sch && input.headers.cookie && !options.silent) {\n                        console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.");\n                    }\n                    input = sch;\n                }\n            }\n            if (!Array.isArray(input)) {\n                input = [\n                    input\n                ];\n            }\n            options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n            if (!options.map) {\n                return input.filter(isNonEmptyString).map(function(str) {\n                    return parseString(str, options);\n                });\n            } else {\n                var cookies = {};\n                return input.filter(isNonEmptyString).reduce(function(cookies2, str) {\n                    var cookie = parseString(str, options);\n                    cookies2[cookie.name] = cookie;\n                    return cookies2;\n                }, cookies);\n            }\n        };\n        var splitCookiesString2 = function splitCookiesString2(cookiesString) {\n            if (Array.isArray(cookiesString)) {\n                return cookiesString;\n            }\n            if (typeof cookiesString !== "string") {\n                return [];\n            }\n            var cookiesStrings = [];\n            var pos = 0;\n            var start;\n            var ch;\n            var lastComma;\n            var nextStart;\n            var cookiesSeparatorFound;\n            function skipWhitespace() {\n                while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n                    pos += 1;\n                }\n                return pos < cookiesString.length;\n            }\n            function notSpecialChar() {\n                ch = cookiesString.charAt(pos);\n                return ch !== "=" && ch !== ";" && ch !== ",";\n            }\n            while(pos < cookiesString.length){\n                start = pos;\n                cookiesSeparatorFound = false;\n                while(skipWhitespace()){\n                    ch = cookiesString.charAt(pos);\n                    if (ch === ",") {\n                        lastComma = pos;\n                        pos += 1;\n                        skipWhitespace();\n                        nextStart = pos;\n                        while(pos < cookiesString.length && notSpecialChar()){\n                            pos += 1;\n                        }\n                        if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {\n                            cookiesSeparatorFound = true;\n                            pos = nextStart;\n                            cookiesStrings.push(cookiesString.substring(start, lastComma));\n                            start = pos;\n                        } else {\n                            pos = lastComma + 1;\n                        }\n                    } else {\n                        pos += 1;\n                    }\n                }\n                if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n                    cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n                }\n            }\n            return cookiesStrings;\n        };\n        var defaultParseOptions = {\n            decodeValues: true,\n            map: false,\n            silent: false\n        };\n        module2.exports = parse;\n        module2.exports.parse = parse;\n        module2.exports.parseString = parseString;\n        module2.exports.splitCookiesString = splitCookiesString2;\n    }\n});\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    Headers: function() {\n        return HeadersPolyfill;\n    },\n    flattenHeadersList: function() {\n        return flattenHeadersList;\n    },\n    flattenHeadersObject: function() {\n        return flattenHeadersObject;\n    },\n    headersToList: function() {\n        return headersToList;\n    },\n    headersToObject: function() {\n        return headersToObject;\n    },\n    headersToString: function() {\n        return headersToString;\n    },\n    listToHeaders: function() {\n        return listToHeaders;\n    },\n    objectToHeaders: function() {\n        return objectToHeaders;\n    },\n    reduceHeadersObject: function() {\n        return reduceHeadersObject;\n    },\n    stringToHeaders: function() {\n        return stringToHeaders;\n    }\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/Headers.ts\nvar import_set_cookie_parser = __toESM(require_set_cookie());\n// src/utils/normalizeHeaderName.ts\nvar HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&\'*+.^_`|~]/i;\nfunction normalizeHeaderName(name) {\n    if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === "") {\n        throw new TypeError("Invalid character in header field name");\n    }\n    return name.trim().toLowerCase();\n}\n// src/utils/normalizeHeaderValue.ts\nvar charCodesToRemove = [\n    String.fromCharCode(10),\n    String.fromCharCode(13),\n    String.fromCharCode(9),\n    String.fromCharCode(32)\n];\nvar HEADER_VALUE_REMOVE_REGEXP = new RegExp("(^[".concat(charCodesToRemove.join(""), "]|$[").concat(charCodesToRemove.join(""), "])"), "g");\nfunction normalizeHeaderValue(value) {\n    var nextValue = value.replace(HEADER_VALUE_REMOVE_REGEXP, "");\n    return nextValue;\n}\n// src/utils/isValidHeaderName.ts\nfunction isValidHeaderName(value) {\n    if (typeof value !== "string") {\n        return false;\n    }\n    if (value.length === 0) {\n        return false;\n    }\n    for(var i = 0; i < value.length; i++){\n        var character = value.charCodeAt(i);\n        if (character > 127 || !isToken(character)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isToken(value) {\n    return ![\n        127,\n        32,\n        "(",\n        ")",\n        "<",\n        ">",\n        "@",\n        ",",\n        ";",\n        ":",\n        "\\\\",\n        \'"\',\n        "/",\n        "[",\n        "]",\n        "?",\n        "=",\n        "{",\n        "}"\n    ].includes(value);\n}\n// src/utils/isValidHeaderValue.ts\nfunction isValidHeaderValue(value) {\n    if (typeof value !== "string") {\n        return false;\n    }\n    if (value.trim() !== value) {\n        return false;\n    }\n    for(var i = 0; i < value.length; i++){\n        var character = value.charCodeAt(i);\n        if (character === 0 || character === 10 || character === 13) {\n            return false;\n        }\n    }\n    return true;\n}\n// src/Headers.ts\nvar NORMALIZED_HEADERS = Symbol("normalizedHeaders");\nvar RAW_HEADER_NAMES = Symbol("rawHeaderNames");\nvar HEADER_VALUE_DELIMITER = ", ";\nvar _a, _b;\nvar HeadersPolyfill = /*#__PURE__*/ function() {\n    "use strict";\n    function HeadersPolyfill1(init) {\n        var _this = this;\n        _class_call_check(this, HeadersPolyfill1);\n        var _init;\n        this[_a] = {};\n        this[_b] = /* @__PURE__ */ new Map();\n        if ([\n            "Headers",\n            "HeadersPolyfill"\n        ].includes((_init = init) === null || _init === void 0 ? void 0 : _init.constructor.name) || _instanceof(init, HeadersPolyfill)) {\n            var initialHeaders = init;\n            initialHeaders.forEach(function(value, name) {\n                _this.append(name, value);\n            }, this);\n        } else if (Array.isArray(init)) {\n            init.forEach(function(param) {\n                var _param = _sliced_to_array(param, 2), name = _param[0], value = _param[1];\n                _this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);\n            });\n        } else if (init) {\n            Object.getOwnPropertyNames(init).forEach(function(name) {\n                var value = init[name];\n                _this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);\n            });\n        }\n    }\n    _create_class(HeadersPolyfill1, [\n        {\n            key: (_a = NORMALIZED_HEADERS, _b = RAW_HEADER_NAMES, Symbol.iterator),\n            value: function value() {\n                return this.entries();\n            }\n        },\n        {\n            key: "keys",\n            value: function keys() {\n                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, name, err;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                            _state.label = 1;\n                        case 1:\n                            _state.trys.push([\n                                1,\n                                6,\n                                7,\n                                8\n                            ]);\n                            _iterator = this.entries()[Symbol.iterator]();\n                            _state.label = 2;\n                        case 2:\n                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [\n                                3,\n                                5\n                            ];\n                            _step_value = _sliced_to_array(_step.value, 1), name = _step_value[0];\n                            return [\n                                4,\n                                name\n                            ];\n                        case 3:\n                            _state.sent();\n                            _state.label = 4;\n                        case 4:\n                            _iteratorNormalCompletion = true;\n                            return [\n                                3,\n                                2\n                            ];\n                        case 5:\n                            return [\n                                3,\n                                8\n                            ];\n                        case 6:\n                            err = _state.sent();\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                            return [\n                                3,\n                                8\n                            ];\n                        case 7:\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                            return [\n                                7\n                            ];\n                        case 8:\n                            return [\n                                2\n                            ];\n                    }\n                });\n            }\n        },\n        {\n            key: "values",\n            value: function values() {\n                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, value, err;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                            _state.label = 1;\n                        case 1:\n                            _state.trys.push([\n                                1,\n                                6,\n                                7,\n                                8\n                            ]);\n                            _iterator = this.entries()[Symbol.iterator]();\n                            _state.label = 2;\n                        case 2:\n                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [\n                                3,\n                                5\n                            ];\n                            _step_value = _sliced_to_array(_step.value, 2), value = _step_value[1];\n                            return [\n                                4,\n                                value\n                            ];\n                        case 3:\n                            _state.sent();\n                            _state.label = 4;\n                        case 4:\n                            _iteratorNormalCompletion = true;\n                            return [\n                                3,\n                                2\n                            ];\n                        case 5:\n                            return [\n                                3,\n                                8\n                            ];\n                        case 6:\n                            err = _state.sent();\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                            return [\n                                3,\n                                8\n                            ];\n                        case 7:\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                            return [\n                                7\n                            ];\n                        case 8:\n                            return [\n                                2\n                            ];\n                    }\n                });\n            }\n        },\n        {\n            key: "entries",\n            value: function entries() {\n                var sortedKeys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, name, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, value, err, err;\n                return _ts_generator(this, function(_state) {\n                    switch(_state.label){\n                        case 0:\n                            sortedKeys = Object.keys(this[NORMALIZED_HEADERS]).sort(function(a, b) {\n                                return a.localeCompare(b);\n                            });\n                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                            _state.label = 1;\n                        case 1:\n                            _state.trys.push([\n                                1,\n                                15,\n                                16,\n                                17\n                            ]);\n                            _iterator = sortedKeys[Symbol.iterator]();\n                            _state.label = 2;\n                        case 2:\n                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [\n                                3,\n                                14\n                            ];\n                            name = _step.value;\n                            if (!(name === "set-cookie")) return [\n                                3,\n                                11\n                            ];\n                            _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                            _state.label = 3;\n                        case 3:\n                            _state.trys.push([\n                                3,\n                                8,\n                                9,\n                                10\n                            ]);\n                            _iterator1 = this.getSetCookie()[Symbol.iterator]();\n                            _state.label = 4;\n                        case 4:\n                            if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [\n                                3,\n                                7\n                            ];\n                            value = _step1.value;\n                            return [\n                                4,\n                                [\n                                    name,\n                                    value\n                                ]\n                            ];\n                        case 5:\n                            _state.sent();\n                            _state.label = 6;\n                        case 6:\n                            _iteratorNormalCompletion1 = true;\n                            return [\n                                3,\n                                4\n                            ];\n                        case 7:\n                            return [\n                                3,\n                                10\n                            ];\n                        case 8:\n                            err = _state.sent();\n                            _didIteratorError1 = true;\n                            _iteratorError1 = err;\n                            return [\n                                3,\n                                10\n                            ];\n                        case 9:\n                            try {\n                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError1) {\n                                    throw _iteratorError1;\n                                }\n                            }\n                            return [\n                                7\n                            ];\n                        case 10:\n                            return [\n                                3,\n                                13\n                            ];\n                        case 11:\n                            return [\n                                4,\n                                [\n                                    name,\n                                    this.get(name)\n                                ]\n                            ];\n                        case 12:\n                            _state.sent();\n                            _state.label = 13;\n                        case 13:\n                            _iteratorNormalCompletion = true;\n                            return [\n                                3,\n                                2\n                            ];\n                        case 14:\n                            return [\n                                3,\n                                17\n                            ];\n                        case 15:\n                            err = _state.sent();\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                            return [\n                                3,\n                                17\n                            ];\n                        case 16:\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                            return [\n                                7\n                            ];\n                        case 17:\n                            return [\n                                2\n                            ];\n                    }\n                });\n            }\n        },\n        {\n            key: "has",\n            value: function has(name) {\n                if (!isValidHeaderName(name)) {\n                    throw new TypeError(\'Invalid header name "\'.concat(name, \'"\'));\n                }\n                return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name));\n            }\n        },\n        {\n            key: "get",\n            value: function get(name) {\n                if (!isValidHeaderName(name)) {\n                    throw TypeError(\'Invalid header name "\'.concat(name, \'"\'));\n                }\n                var _this_NORMALIZED_HEADERS_normalizeHeaderName;\n                return (_this_NORMALIZED_HEADERS_normalizeHeaderName = this[NORMALIZED_HEADERS][normalizeHeaderName(name)]) !== null && _this_NORMALIZED_HEADERS_normalizeHeaderName !== void 0 ? _this_NORMALIZED_HEADERS_normalizeHeaderName : null;\n            }\n        },\n        {\n            key: "set",\n            value: function set(name, value) {\n                if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n                    return;\n                }\n                var normalizedName = normalizeHeaderName(name);\n                var normalizedValue = normalizeHeaderValue(value);\n                this[NORMALIZED_HEADERS][normalizedName] = normalizeHeaderValue(normalizedValue);\n                this[RAW_HEADER_NAMES].set(normalizedName, name);\n            }\n        },\n        {\n            key: "append",\n            value: function append(name, value) {\n                if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n                    return;\n                }\n                var normalizedName = normalizeHeaderName(name);\n                var normalizedValue = normalizeHeaderValue(value);\n                var resolvedValue = this.has(normalizedName) ? "".concat(this.get(normalizedName), ", ").concat(normalizedValue) : normalizedValue;\n                this.set(name, resolvedValue);\n            }\n        },\n        {\n            key: "delete",\n            value: function _delete(name) {\n                if (!isValidHeaderName(name)) {\n                    return;\n                }\n                if (!this.has(name)) {\n                    return;\n                }\n                var normalizedName = normalizeHeaderName(name);\n                delete this[NORMALIZED_HEADERS][normalizedName];\n                this[RAW_HEADER_NAMES].delete(normalizedName);\n            }\n        },\n        {\n            key: "all",\n            value: function all() {\n                return this[NORMALIZED_HEADERS];\n            }\n        },\n        {\n            key: "raw",\n            value: function raw() {\n                var rawHeaders = {};\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var _step_value = _sliced_to_array(_step.value, 2), name = _step_value[0], value = _step_value[1];\n                        rawHeaders[this[RAW_HEADER_NAMES].get(name)] = value;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return rawHeaders;\n            }\n        },\n        {\n            key: "forEach",\n            value: function forEach(callback, thisArg) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var _step_value = _sliced_to_array(_step.value, 2), name = _step_value[0], value = _step_value[1];\n                        callback.call(thisArg, value, name, this);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: "getSetCookie",\n            value: function getSetCookie() {\n                var setCookieHeader = this.get("set-cookie");\n                if (setCookieHeader === null) {\n                    return [];\n                }\n                if (setCookieHeader === "") {\n                    return [\n                        ""\n                    ];\n                }\n                return (0, import_set_cookie_parser.splitCookiesString)(setCookieHeader);\n            }\n        }\n    ]);\n    return HeadersPolyfill1;\n}();\n// src/transformers/headersToList.ts\nfunction headersToList(headers) {\n    var headersList = [];\n    headers.forEach(function(value, name) {\n        var resolvedValue = value.includes(",") ? value.split(",").map(function(value2) {\n            return value2.trim();\n        }) : value;\n        headersList.push([\n            name,\n            resolvedValue\n        ]);\n    });\n    return headersList;\n}\n// src/transformers/headersToString.ts\nfunction headersToString(headers) {\n    var list = headersToList(headers);\n    var lines = list.map(function(param) {\n        var _param = _sliced_to_array(param, 2), name = _param[0], value = _param[1];\n        var values = [].concat(value);\n        return "".concat(name, ": ").concat(values.join(", "));\n    });\n    return lines.join("\\r\\n");\n}\n// src/transformers/headersToObject.ts\nvar singleValueHeaders = [\n    "user-agent"\n];\nfunction headersToObject(headers) {\n    var headersObject = {};\n    headers.forEach(function(value, name) {\n        var isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(",");\n        headersObject[name] = isMultiValue ? value.split(",").map(function(s) {\n            return s.trim();\n        }) : value;\n    });\n    return headersObject;\n}\n// src/transformers/stringToHeaders.ts\nfunction stringToHeaders(str) {\n    var lines = str.trim().split(/[\\r\\n]+/);\n    return lines.reduce(function(headers, line) {\n        if (line.trim() === "") {\n            return headers;\n        }\n        var parts = line.split(": ");\n        var name = parts.shift();\n        var value = parts.join(": ");\n        headers.append(name, value);\n        return headers;\n    }, new HeadersPolyfill());\n}\n// src/transformers/listToHeaders.ts\nfunction listToHeaders(list) {\n    var headers = new HeadersPolyfill();\n    list.forEach(function(param) {\n        var _param = _sliced_to_array(param, 2), name = _param[0], value = _param[1];\n        var values = [].concat(value);\n        values.forEach(function(value2) {\n            headers.append(name, value2);\n        });\n    });\n    return headers;\n}\n// src/transformers/reduceHeadersObject.ts\nfunction reduceHeadersObject(headers, reducer, initialState) {\n    return Object.keys(headers).reduce(function(nextHeaders, name) {\n        return reducer(nextHeaders, name, headers[name]);\n    }, initialState);\n}\n// src/transformers/objectToHeaders.ts\nfunction objectToHeaders(headersObject) {\n    return reduceHeadersObject(headersObject, function(headers, name, value) {\n        var values = [].concat(value).filter(Boolean);\n        values.forEach(function(value2) {\n            headers.append(name, value2);\n        });\n        return headers;\n    }, new HeadersPolyfill());\n}\n// src/transformers/flattenHeadersList.ts\nfunction flattenHeadersList(list) {\n    return list.map(function(param) {\n        var _param = _sliced_to_array(param, 2), name = _param[0], values = _param[1];\n        return [\n            name,\n            [].concat(values).join(", ")\n        ];\n    });\n}\n// src/transformers/flattenHeadersObject.ts\nfunction flattenHeadersObject(headersObject) {\n    return reduceHeadersObject(headersObject, function(headers, name, value) {\n        headers[name] = [].concat(value).join(", ");\n        return headers;\n    }, {});\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/headers-polyfill/lib/index.js\n',
      );

      /***/
    },

  /***/ '(ssr)/./node_modules/headers-polyfill/lib/index.mjs':
    /*!*****************************************************!*\
  !*** ./node_modules/headers-polyfill/lib/index.mjs ***!
  \*****************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      'use strict';
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Headers: () => (/* binding */ HeadersPolyfill),\n/* harmony export */   flattenHeadersList: () => (/* binding */ flattenHeadersList),\n/* harmony export */   flattenHeadersObject: () => (/* binding */ flattenHeadersObject),\n/* harmony export */   headersToList: () => (/* binding */ headersToList),\n/* harmony export */   headersToObject: () => (/* binding */ headersToObject),\n/* harmony export */   headersToString: () => (/* binding */ headersToString),\n/* harmony export */   listToHeaders: () => (/* binding */ listToHeaders),\n/* harmony export */   objectToHeaders: () => (/* binding */ objectToHeaders),\n/* harmony export */   reduceHeadersObject: () => (/* binding */ reduceHeadersObject),\n/* harmony export */   stringToHeaders: () => (/* binding */ stringToHeaders)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module) {\n    "use strict";\n    var defaultParseOptions = {\n      decodeValues: true,\n      map: false,\n      silent: false\n    };\n    function isNonEmptyString(str) {\n      return typeof str === "string" && !!str.trim();\n    }\n    function parseString(setCookieValue, options) {\n      var parts = setCookieValue.split(";").filter(isNonEmptyString);\n      var nameValuePairStr = parts.shift();\n      var parsed = parseNameValuePair(nameValuePairStr);\n      var name = parsed.name;\n      var value = parsed.value;\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      try {\n        value = options.decodeValues ? decodeURIComponent(value) : value;\n      } catch (e) {\n        console.error(\n          "set-cookie-parser encountered an error while decoding a cookie with value \'" + value + "\'. Set options.decodeValues to false to disable this feature.",\n          e\n        );\n      }\n      var cookie = {\n        name,\n        value\n      };\n      parts.forEach(function(part) {\n        var sides = part.split("=");\n        var key = sides.shift().trimLeft().toLowerCase();\n        var value2 = sides.join("=");\n        if (key === "expires") {\n          cookie.expires = new Date(value2);\n        } else if (key === "max-age") {\n          cookie.maxAge = parseInt(value2, 10);\n        } else if (key === "secure") {\n          cookie.secure = true;\n        } else if (key === "httponly") {\n          cookie.httpOnly = true;\n        } else if (key === "samesite") {\n          cookie.sameSite = value2;\n        } else {\n          cookie[key] = value2;\n        }\n      });\n      return cookie;\n    }\n    function parseNameValuePair(nameValuePairStr) {\n      var name = "";\n      var value = "";\n      var nameValueArr = nameValuePairStr.split("=");\n      if (nameValueArr.length > 1) {\n        name = nameValueArr.shift();\n        value = nameValueArr.join("=");\n      } else {\n        value = nameValuePairStr;\n      }\n      return { name, value };\n    }\n    function parse(input, options) {\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!input) {\n        if (!options.map) {\n          return [];\n        } else {\n          return {};\n        }\n      }\n      if (input.headers) {\n        if (typeof input.headers.getSetCookie === "function") {\n          input = input.headers.getSetCookie();\n        } else if (input.headers["set-cookie"]) {\n          input = input.headers["set-cookie"];\n        } else {\n          var sch = input.headers[Object.keys(input.headers).find(function(key) {\n            return key.toLowerCase() === "set-cookie";\n          })];\n          if (!sch && input.headers.cookie && !options.silent) {\n            console.warn(\n              "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."\n            );\n          }\n          input = sch;\n        }\n      }\n      if (!Array.isArray(input)) {\n        input = [input];\n      }\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!options.map) {\n        return input.filter(isNonEmptyString).map(function(str) {\n          return parseString(str, options);\n        });\n      } else {\n        var cookies = {};\n        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {\n          var cookie = parseString(str, options);\n          cookies2[cookie.name] = cookie;\n          return cookies2;\n        }, cookies);\n      }\n    }\n    function splitCookiesString2(cookiesString) {\n      if (Array.isArray(cookiesString)) {\n        return cookiesString;\n      }\n      if (typeof cookiesString !== "string") {\n        return [];\n      }\n      var cookiesStrings = [];\n      var pos = 0;\n      var start;\n      var ch;\n      var lastComma;\n      var nextStart;\n      var cookiesSeparatorFound;\n      function skipWhitespace() {\n        while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n          pos += 1;\n        }\n        return pos < cookiesString.length;\n      }\n      function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== "=" && ch !== ";" && ch !== ",";\n      }\n      while (pos < cookiesString.length) {\n        start = pos;\n        cookiesSeparatorFound = false;\n        while (skipWhitespace()) {\n          ch = cookiesString.charAt(pos);\n          if (ch === ",") {\n            lastComma = pos;\n            pos += 1;\n            skipWhitespace();\n            nextStart = pos;\n            while (pos < cookiesString.length && notSpecialChar()) {\n              pos += 1;\n            }\n            if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {\n              cookiesSeparatorFound = true;\n              pos = nextStart;\n              cookiesStrings.push(cookiesString.substring(start, lastComma));\n              start = pos;\n            } else {\n              pos = lastComma + 1;\n            }\n          } else {\n            pos += 1;\n          }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n      }\n      return cookiesStrings;\n    }\n    module.exports = parse;\n    module.exports.parse = parse;\n    module.exports.parseString = parseString;\n    module.exports.splitCookiesString = splitCookiesString2;\n  }\n});\n\n// src/Headers.ts\nvar import_set_cookie_parser = __toESM(require_set_cookie());\n\n// src/utils/normalizeHeaderName.ts\nvar HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&\'*+.^_`|~]/i;\nfunction normalizeHeaderName(name) {\n  if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === "") {\n    throw new TypeError("Invalid character in header field name");\n  }\n  return name.trim().toLowerCase();\n}\n\n// src/utils/normalizeHeaderValue.ts\nvar charCodesToRemove = [\n  String.fromCharCode(10),\n  String.fromCharCode(13),\n  String.fromCharCode(9),\n  String.fromCharCode(32)\n];\nvar HEADER_VALUE_REMOVE_REGEXP = new RegExp(\n  `(^[${charCodesToRemove.join("")}]|$[${charCodesToRemove.join("")}])`,\n  "g"\n);\nfunction normalizeHeaderValue(value) {\n  const nextValue = value.replace(HEADER_VALUE_REMOVE_REGEXP, "");\n  return nextValue;\n}\n\n// src/utils/isValidHeaderName.ts\nfunction isValidHeaderName(value) {\n  if (typeof value !== "string") {\n    return false;\n  }\n  if (value.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i);\n    if (character > 127 || !isToken(character)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isToken(value) {\n  return ![\n    127,\n    32,\n    "(",\n    ")",\n    "<",\n    ">",\n    "@",\n    ",",\n    ";",\n    ":",\n    "\\\\",\n    \'"\',\n    "/",\n    "[",\n    "]",\n    "?",\n    "=",\n    "{",\n    "}"\n  ].includes(value);\n}\n\n// src/utils/isValidHeaderValue.ts\nfunction isValidHeaderValue(value) {\n  if (typeof value !== "string") {\n    return false;\n  }\n  if (value.trim() !== value) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const character = value.charCodeAt(i);\n    if (character === 0 || character === 10 || character === 13) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// src/Headers.ts\nvar NORMALIZED_HEADERS = Symbol("normalizedHeaders");\nvar RAW_HEADER_NAMES = Symbol("rawHeaderNames");\nvar HEADER_VALUE_DELIMITER = ", ";\nvar _a, _b;\nvar HeadersPolyfill = class {\n  constructor(init) {\n    this[_a] = {};\n    this[_b] = /* @__PURE__ */ new Map();\n    if (["Headers", "HeadersPolyfill"].includes(init?.constructor.name) || init instanceof HeadersPolyfill) {\n      const initialHeaders = init;\n      initialHeaders.forEach((value, name) => {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(init)) {\n      init.forEach(([name, value]) => {\n        this.append(\n          name,\n          Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value\n        );\n      });\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach((name) => {\n        const value = init[name];\n        this.append(\n          name,\n          Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value\n        );\n      });\n    }\n  }\n  [(_a = NORMALIZED_HEADERS, _b = RAW_HEADER_NAMES, Symbol.iterator)]() {\n    return this.entries();\n  }\n  *keys() {\n    for (const [name] of this.entries()) {\n      yield name;\n    }\n  }\n  *values() {\n    for (const [, value] of this.entries()) {\n      yield value;\n    }\n  }\n  *entries() {\n    let sortedKeys = Object.keys(this[NORMALIZED_HEADERS]).sort(\n      (a, b) => a.localeCompare(b)\n    );\n    for (const name of sortedKeys) {\n      if (name === "set-cookie") {\n        for (const value of this.getSetCookie()) {\n          yield [name, value];\n        }\n      } else {\n        yield [name, this.get(name)];\n      }\n    }\n  }\n  has(name) {\n    if (!isValidHeaderName(name)) {\n      throw new TypeError(`Invalid header name "${name}"`);\n    }\n    return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name));\n  }\n  get(name) {\n    if (!isValidHeaderName(name)) {\n      throw TypeError(`Invalid header name "${name}"`);\n    }\n    return this[NORMALIZED_HEADERS][normalizeHeaderName(name)] ?? null;\n  }\n  set(name, value) {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return;\n    }\n    const normalizedName = normalizeHeaderName(name);\n    const normalizedValue = normalizeHeaderValue(value);\n    this[NORMALIZED_HEADERS][normalizedName] = normalizeHeaderValue(normalizedValue);\n    this[RAW_HEADER_NAMES].set(normalizedName, name);\n  }\n  append(name, value) {\n    if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {\n      return;\n    }\n    const normalizedName = normalizeHeaderName(name);\n    const normalizedValue = normalizeHeaderValue(value);\n    let resolvedValue = this.has(normalizedName) ? `${this.get(normalizedName)}, ${normalizedValue}` : normalizedValue;\n    this.set(name, resolvedValue);\n  }\n  delete(name) {\n    if (!isValidHeaderName(name)) {\n      return;\n    }\n    if (!this.has(name)) {\n      return;\n    }\n    const normalizedName = normalizeHeaderName(name);\n    delete this[NORMALIZED_HEADERS][normalizedName];\n    this[RAW_HEADER_NAMES].delete(normalizedName);\n  }\n  all() {\n    return this[NORMALIZED_HEADERS];\n  }\n  raw() {\n    const rawHeaders = {};\n    for (const [name, value] of this.entries()) {\n      rawHeaders[this[RAW_HEADER_NAMES].get(name)] = value;\n    }\n    return rawHeaders;\n  }\n  forEach(callback, thisArg) {\n    for (const [name, value] of this.entries()) {\n      callback.call(thisArg, value, name, this);\n    }\n  }\n  getSetCookie() {\n    const setCookieHeader = this.get("set-cookie");\n    if (setCookieHeader === null) {\n      return [];\n    }\n    if (setCookieHeader === "") {\n      return [""];\n    }\n    return (0, import_set_cookie_parser.splitCookiesString)(setCookieHeader);\n  }\n};\n\n// src/transformers/headersToList.ts\nfunction headersToList(headers) {\n  const headersList = [];\n  headers.forEach((value, name) => {\n    const resolvedValue = value.includes(",") ? value.split(",").map((value2) => value2.trim()) : value;\n    headersList.push([name, resolvedValue]);\n  });\n  return headersList;\n}\n\n// src/transformers/headersToString.ts\nfunction headersToString(headers) {\n  const list = headersToList(headers);\n  const lines = list.map(([name, value]) => {\n    const values = [].concat(value);\n    return `${name}: ${values.join(", ")}`;\n  });\n  return lines.join("\\r\\n");\n}\n\n// src/transformers/headersToObject.ts\nvar singleValueHeaders = ["user-agent"];\nfunction headersToObject(headers) {\n  const headersObject = {};\n  headers.forEach((value, name) => {\n    const isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(",");\n    headersObject[name] = isMultiValue ? value.split(",").map((s) => s.trim()) : value;\n  });\n  return headersObject;\n}\n\n// src/transformers/stringToHeaders.ts\nfunction stringToHeaders(str) {\n  const lines = str.trim().split(/[\\r\\n]+/);\n  return lines.reduce((headers, line) => {\n    if (line.trim() === "") {\n      return headers;\n    }\n    const parts = line.split(": ");\n    const name = parts.shift();\n    const value = parts.join(": ");\n    headers.append(name, value);\n    return headers;\n  }, new HeadersPolyfill());\n}\n\n// src/transformers/listToHeaders.ts\nfunction listToHeaders(list) {\n  const headers = new HeadersPolyfill();\n  list.forEach(([name, value]) => {\n    const values = [].concat(value);\n    values.forEach((value2) => {\n      headers.append(name, value2);\n    });\n  });\n  return headers;\n}\n\n// src/transformers/reduceHeadersObject.ts\nfunction reduceHeadersObject(headers, reducer, initialState) {\n  return Object.keys(headers).reduce((nextHeaders, name) => {\n    return reducer(nextHeaders, name, headers[name]);\n  }, initialState);\n}\n\n// src/transformers/objectToHeaders.ts\nfunction objectToHeaders(headersObject) {\n  return reduceHeadersObject(\n    headersObject,\n    (headers, name, value) => {\n      const values = [].concat(value).filter(Boolean);\n      values.forEach((value2) => {\n        headers.append(name, value2);\n      });\n      return headers;\n    },\n    new HeadersPolyfill()\n  );\n}\n\n// src/transformers/flattenHeadersList.ts\nfunction flattenHeadersList(list) {\n  return list.map(([name, values]) => {\n    return [name, [].concat(values).join(", ")];\n  });\n}\n\n// src/transformers/flattenHeadersObject.ts\nfunction flattenHeadersObject(headersObject) {\n  return reduceHeadersObject(\n    headersObject,\n    (headers, name, value) => {\n      headers[name] = [].concat(value).join(", ");\n      return headers;\n    },\n    {}\n  );\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/headers-polyfill/lib/index.mjs\n',
      );

      /***/
    },
};
